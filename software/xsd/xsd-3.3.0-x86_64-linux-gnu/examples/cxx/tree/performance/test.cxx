// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "test.hxx"

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace test
{
  // enum_
  //

  enum_::
  enum_ (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
    _xsd_enum__convert ();
  }

  enum_::
  enum_ (const ::xercesc::DOMAttr& a,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
    _xsd_enum__convert ();
  }

  enum_::
  enum_ (const ::std::string& s,
         const ::xercesc::DOMElement* e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
    _xsd_enum__convert ();
  }

  enum_* enum_::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class enum_ (*this, f, c);
  }

  enum_::value enum_::
  _xsd_enum__convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_enum__literals_);
    const value* i (::std::lower_bound (
                      _xsd_enum__indexes_,
                      _xsd_enum__indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_enum__indexes_ + 5 || _xsd_enum__literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const enum_::
  _xsd_enum__literals_[5] =
  {
    "romance",
    "fiction",
    "horror",
    "history",
    "philosophy"
  };

  const enum_::value enum_::
  _xsd_enum__indexes_[5] =
  {
    ::test::enum_::fiction,
    ::test::enum_::history,
    ::test::enum_::horror,
    ::test::enum_::philosophy,
    ::test::enum_::romance
  };

  // record
  //

  record::
  record (const int_type& int_,
          const double_type& double_,
          const name_type& name,
          const enum_type& enum_,
          const orange_type& orange)
  : ::xml_schema::type (),
    int__ (int_, ::xml_schema::flags (), this),
    double__ (double_, ::xml_schema::flags (), this),
    name_ (name, ::xml_schema::flags (), this),
    string_ (::xml_schema::flags (), this),
    choice1_ (::xml_schema::flags (), this),
    choice2_ (::xml_schema::flags (), this),
    choice3_ (::xml_schema::flags (), this),
    choice4_ (::xml_schema::flags (), this),
    enum__ (enum_, ::xml_schema::flags (), this),
    apple_ (::xml_schema::flags (), this),
    orange_ (orange, ::xml_schema::flags (), this)
  {
  }

  record::
  record (const record& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    int__ (x.int__, f, this),
    double__ (x.double__, f, this),
    name_ (x.name_, f, this),
    string_ (x.string_, f, this),
    choice1_ (x.choice1_, f, this),
    choice2_ (x.choice2_, f, this),
    choice3_ (x.choice3_, f, this),
    choice4_ (x.choice4_, f, this),
    enum__ (x.enum__, f, this),
    apple_ (x.apple_, f, this),
    orange_ (x.orange_, f, this)
  {
  }

  record::
  record (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    int__ (f, this),
    double__ (f, this),
    name_ (f, this),
    string_ (f, this),
    choice1_ (f, this),
    choice2_ (f, this),
    choice3_ (f, this),
    choice4_ (f, this),
    enum__ (f, this),
    apple_ (f, this),
    orange_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void record::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // int
      //
      if (n.name () == "int" && n.namespace_ ().empty ())
      {
        if (!int__.present ())
        {
          this->int__.set (int_traits::create (i, f, this));
          continue;
        }
      }

      // double
      //
      if (n.name () == "double" && n.namespace_ ().empty ())
      {
        if (!double__.present ())
        {
          this->double__.set (double_traits::create (i, f, this));
          continue;
        }
      }

      // name
      //
      if (n.name () == "name" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< name_type > r (
          name_traits::create (i, f, this));

        if (!name_.present ())
        {
          this->name_.set (r);
          continue;
        }
      }

      // string
      //
      if (n.name () == "string" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< string_type > r (
          string_traits::create (i, f, this));

        if (!this->string_)
        {
          this->string_.set (r);
          continue;
        }
      }

      // choice1
      //
      if (n.name () == "choice1" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< choice1_type > r (
          choice1_traits::create (i, f, this));

        if (!this->choice1_)
        {
          this->choice1_.set (r);
          continue;
        }
      }

      // choice2
      //
      if (n.name () == "choice2" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< choice2_type > r (
          choice2_traits::create (i, f, this));

        if (!this->choice2_)
        {
          this->choice2_.set (r);
          continue;
        }
      }

      // choice3
      //
      if (n.name () == "choice3" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< choice3_type > r (
          choice3_traits::create (i, f, this));

        if (!this->choice3_)
        {
          this->choice3_.set (r);
          continue;
        }
      }

      // choice4
      //
      if (n.name () == "choice4" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< choice4_type > r (
          choice4_traits::create (i, f, this));

        if (!this->choice4_)
        {
          this->choice4_.set (r);
          continue;
        }
      }

      // enum
      //
      if (n.name () == "enum" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< enum_type > r (
          enum_traits::create (i, f, this));

        if (!enum__.present ())
        {
          this->enum__.set (r);
          continue;
        }
      }

      break;
    }

    if (!int__.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "int",
        "");
    }

    if (!double__.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "double",
        "");
    }

    if (!name_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "name",
        "");
    }

    if (!enum__.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "enum",
        "");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "apple" && n.namespace_ ().empty ())
      {
        this->apple_.set (apple_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "orange" && n.namespace_ ().empty ())
      {
        this->orange_.set (orange_traits::create (i, f, this));
        continue;
      }
    }

    if (!orange_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "orange",
        "");
    }
  }

  record* record::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class record (*this, f, c);
  }

  record::
  ~record ()
  {
  }

  // root
  //

  root::
  root ()
  : ::xml_schema::type (),
    record_ (::xml_schema::flags (), this)
  {
  }

  root::
  root (const root& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    record_ (x.record_, f, this)
  {
  }

  root::
  root (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    record_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void root::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // record
      //
      if (n.name () == "record" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< record_type > r (
          record_traits::create (i, f, this));

        this->record_.push_back (r);
        continue;
      }

      break;
    }
  }

  root* root::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class root (*this, f, c);
  }

  root::
  ~root ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace test
{
  ::std::auto_ptr< ::test::root >
  root_ (const ::std::string& u,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::test::root > r (
      ::test::root_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::test::root >
  root_ (const ::std::string& u,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::test::root > r (
      ::test::root_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::test::root >
  root_ (const ::std::string& u,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::test::root > r (
      ::test::root_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::test::root >
  root_ (::std::istream& is,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::test::root_ (isrc, f, p);
  }

  ::std::auto_ptr< ::test::root >
  root_ (::std::istream& is,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::test::root_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::test::root >
  root_ (::std::istream& is,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::test::root_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::test::root >
  root_ (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::test::root_ (isrc, f, p);
  }

  ::std::auto_ptr< ::test::root >
  root_ (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::test::root_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::test::root >
  root_ (::std::istream& is,
         const ::std::string& sid,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::test::root_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::test::root >
  root_ (::xercesc::InputSource& i,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::test::root > r (
      ::test::root_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::test::root >
  root_ (::xercesc::InputSource& i,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::test::root > r (
      ::test::root_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::test::root >
  root_ (::xercesc::InputSource& i,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::test::root > r (
      ::test::root_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::test::root >
  root_ (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::test::root > r (
        ::test::root_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "root" &&
        n.namespace_ () == "test")
    {
      ::std::auto_ptr< ::test::root > r (
        ::xsd::cxx::tree::traits< ::test::root, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "root",
      "test");
  }

  ::std::auto_ptr< ::test::root >
  root_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
         ::xml_schema::flags f,
         const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "root" &&
        n.namespace_ () == "test")
    {
      ::std::auto_ptr< ::test::root > r (
        ::xsd::cxx::tree::traits< ::test::root, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "root",
      "test");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace test
{
  void
  operator<< (::xercesc::DOMElement& e, const enum_& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const enum_& i)
  {
    a << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const enum_& i)
  {
    l << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const record& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // int
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "int",
          e));

      s << i.int_ ();
    }

    // double
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "double",
          e));

      s << ::xml_schema::as_double(i.double_ ());
    }

    // name
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "name",
          e));

      s << i.name ();
    }

    // string
    //
    if (i.string ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "string",
          e));

      s << *i.string ();
    }

    // choice1
    //
    if (i.choice1 ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "choice1",
          e));

      s << *i.choice1 ();
    }

    // choice2
    //
    if (i.choice2 ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "choice2",
          e));

      s << *i.choice2 ();
    }

    // choice3
    //
    if (i.choice3 ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "choice3",
          e));

      s << *i.choice3 ();
    }

    // choice4
    //
    if (i.choice4 ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "choice4",
          e));

      s << *i.choice4 ();
    }

    // enum
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "enum",
          e));

      s << i.enum_ ();
    }

    // apple
    //
    if (i.apple ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "apple",
          e));

      a << *i.apple ();
    }

    // orange
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "orange",
          e));

      a << i.orange ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const root& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // record
    //
    for (root::record_const_iterator
         b (i.record ().begin ()), n (i.record ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "record",
          e));

      s << *b;
    }
  }

  void
  root_ (::std::ostream& o,
         const ::test::root& s,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::test::root_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  root_ (::std::ostream& o,
         const ::test::root& s,
         ::xml_schema::error_handler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::test::root_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  root_ (::std::ostream& o,
         const ::test::root& s,
         ::xercesc::DOMErrorHandler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::test::root_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  root_ (::xercesc::XMLFormatTarget& t,
         const ::test::root& s,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::test::root_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  root_ (::xercesc::XMLFormatTarget& t,
         const ::test::root& s,
         ::xml_schema::error_handler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::test::root_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  root_ (::xercesc::XMLFormatTarget& t,
         const ::test::root& s,
         ::xercesc::DOMErrorHandler& h,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::test::root_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  root_ (::xercesc::DOMDocument& d,
         const ::test::root& s,
         ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "root" &&
        n.namespace_ () == "test")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "root",
        "test");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  root_ (const ::test::root& s,
         const ::xml_schema::namespace_infomap& m,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "root",
        "test",
        m, f));

    ::test::root_ (*d, s, f);
    return d;
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

