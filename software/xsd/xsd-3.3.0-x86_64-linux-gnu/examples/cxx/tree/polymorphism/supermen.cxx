// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "supermen.hxx"

// person
// 

const person::name_type& person::
name () const
{
  return this->name_.get ();
}

person::name_type& person::
name ()
{
  return this->name_.get ();
}

void person::
name (const name_type& x)
{
  this->name_.set (x);
}

void person::
name (::std::auto_ptr< name_type > x)
{
  this->name_.set (x);
}


// superman
// 

const superman::can_fly_type& superman::
can_fly () const
{
  return this->can_fly_.get ();
}

superman::can_fly_type& superman::
can_fly ()
{
  return this->can_fly_.get ();
}

void superman::
can_fly (const can_fly_type& x)
{
  this->can_fly_.set (x);
}


// batman
// 

const batman::wing_span_type& batman::
wing_span () const
{
  return this->wing_span_.get ();
}

batman::wing_span_type& batman::
wing_span ()
{
  return this->wing_span_.get ();
}

void batman::
wing_span (const wing_span_type& x)
{
  this->wing_span_.set (x);
}


// supermen
// 

const supermen::person_sequence& supermen::
person () const
{
  return this->person_;
}

supermen::person_sequence& supermen::
person ()
{
  return this->person_;
}

void supermen::
person (const person_sequence& s)
{
  this->person_ = s;
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

// person
//

person::
person (const name_type& name)
: ::xml_schema::type (),
  name_ (name, ::xml_schema::flags (), this)
{
}

person::
person (const person& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  name_ (x.name_, f, this)
{
}

person::
person (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  name_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void person::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // name
    //
    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< name_type > r (
        name_traits::create (i, f, this));

      if (!name_.present ())
      {
        this->name_.set (r);
        continue;
      }
    }

    break;
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "name",
      "");
  }
}

person* person::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class person (*this, f, c);
}

person::
~person ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, person >
_xsd_person_type_factory_init (
  "person",
  "");

// superman
//

superman::
superman (const name_type& name,
          const can_fly_type& can_fly)
: ::person (name),
  can_fly_ (can_fly, ::xml_schema::flags (), this)
{
}

superman::
superman (const superman& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::person (x, f, c),
  can_fly_ (x.can_fly_, f, this)
{
}

superman::
superman (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::person (e, f | ::xml_schema::flags::base, c),
  can_fly_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
    this->parse (p, f);
  }
}

void superman::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  this->::person::parse (p, f);

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "can-fly" && n.namespace_ ().empty ())
    {
      this->can_fly_.set (can_fly_traits::create (i, f, this));
      continue;
    }
  }

  if (!can_fly_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "can-fly",
      "");
  }
}

superman* superman::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class superman (*this, f, c);
}

superman::
~superman ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, superman >
_xsd_superman_type_factory_init (
  "superman",
  "");

static
const ::xsd::cxx::tree::element_factory_initializer< 0, char, ::superman >
_xsd_superman__element_factory_init (
  "person",
  "",
  "superman",
  "");


// batman
//

batman::
batman (const name_type& name,
        const can_fly_type& can_fly,
        const wing_span_type& wing_span)
: ::superman (name,
              can_fly),
  wing_span_ (wing_span, ::xml_schema::flags (), this)
{
}

batman::
batman (const batman& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::superman (x, f, c),
  wing_span_ (x.wing_span_, f, this)
{
}

batman::
batman (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::superman (e, f | ::xml_schema::flags::base, c),
  wing_span_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
    this->parse (p, f);
  }
}

void batman::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  this->::superman::parse (p, f);

  p.reset_attributes ();

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "wing-span" && n.namespace_ ().empty ())
    {
      this->wing_span_.set (wing_span_traits::create (i, f, this));
      continue;
    }
  }

  if (!wing_span_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "wing-span",
      "");
  }
}

batman* batman::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class batman (*this, f, c);
}

batman::
~batman ()
{
}

static
const ::xsd::cxx::tree::type_factory_initializer< 0, char, batman >
_xsd_batman_type_factory_init (
  "batman",
  "");

// supermen
//

supermen::
supermen ()
: ::xml_schema::type (),
  person_ (::xml_schema::flags (), this)
{
}

supermen::
supermen (const supermen& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  person_ (x.person_, f, this)
{
}

supermen::
supermen (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  person_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void supermen::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // person
    //
    {
      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "person",
          "",
          &::xsd::cxx::tree::factory_impl< person_type >,
          true, true, i, n, f, this));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< person_type > r (
          dynamic_cast< person_type* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        this->person_.push_back (r);
        continue;
      }
    }

    break;
  }
}

supermen* supermen::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class supermen (*this, f, c);
}

supermen::
~supermen ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::supermen >
supermen_ (const ::std::string& u,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::supermen > r (
    ::supermen_ (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::supermen >
supermen_ (const ::std::string& u,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::supermen > r (
    ::supermen_ (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::supermen >
supermen_ (const ::std::string& u,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::supermen > r (
    ::supermen_ (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::supermen >
supermen_ (::std::istream& is,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::supermen_ (isrc, f, p);
}

::std::auto_ptr< ::supermen >
supermen_ (::std::istream& is,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::supermen_ (isrc, h, f, p);
}

::std::auto_ptr< ::supermen >
supermen_ (::std::istream& is,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::supermen_ (isrc, h, f, p);
}

::std::auto_ptr< ::supermen >
supermen_ (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::supermen_ (isrc, f, p);
}

::std::auto_ptr< ::supermen >
supermen_ (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::supermen_ (isrc, h, f, p);
}

::std::auto_ptr< ::supermen >
supermen_ (::std::istream& is,
           const ::std::string& sid,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::supermen_ (isrc, h, f, p);
}

::std::auto_ptr< ::supermen >
supermen_ (::xercesc::InputSource& i,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::supermen > r (
    ::supermen_ (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::supermen >
supermen_ (::xercesc::InputSource& i,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::supermen > r (
    ::supermen_ (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::supermen >
supermen_ (::xercesc::InputSource& i,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::supermen > r (
    ::supermen_ (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::supermen >
supermen_ (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

    ::std::auto_ptr< ::supermen > r (
      ::supermen_ (
        c, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  const ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "supermen" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::supermen > r (
      ::xsd::cxx::tree::traits< ::supermen, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "supermen",
    "");
}

::std::auto_ptr< ::supermen >
supermen_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
           ::xml_schema::flags f,
           const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "supermen" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::supermen > r (
      ::xsd::cxx::tree::traits< ::supermen, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "supermen",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

void
operator<< (::xercesc::DOMElement& e, const person& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // name
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "name",
        e));

    s << i.name ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, person >
_xsd_person_type_serializer_init (
  "person",
  "");


void
operator<< (::xercesc::DOMElement& e, const superman& i)
{
  e << static_cast< const ::person& > (i);

  // can-fly
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "can-fly",
        e));

    a << i.can_fly ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, superman >
_xsd_superman_type_serializer_init (
  "superman",
  "");


static
const ::xsd::cxx::tree::element_serializer_initializer< 0, char, ::superman >
_xsd_superman__element_serializer_init (
  "person",
  "",
  "superman",
  "");


void
operator<< (::xercesc::DOMElement& e, const batman& i)
{
  e << static_cast< const ::superman& > (i);

  // wing-span
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "wing-span",
        e));

    a << i.wing_span ();
  }
}

static
const ::xsd::cxx::tree::type_serializer_initializer< 0, char, batman >
_xsd_batman_type_serializer_init (
  "batman",
  "");


void
operator<< (::xercesc::DOMElement& e, const supermen& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // person
  //
  {
    ::xsd::cxx::tree::type_serializer_map< char >& tsm (
      ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

    for (supermen::person_const_iterator
         b (i.person ().begin ()), n (i.person ().end ());
         b != n; ++b)
    {
      if (typeid (supermen::person_type) == typeid (*b))
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "person",
            e));

        s << *b;
      }
      else
        tsm.serialize (
          "person",
          "",
          true, true, e, *b);
    }
  }
}

void
supermen_ (::std::ostream& o,
           const ::supermen& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::supermen_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
supermen_ (::std::ostream& o,
           const ::supermen& s,
           ::xml_schema::error_handler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::supermen_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
supermen_ (::std::ostream& o,
           const ::supermen& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::supermen_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
supermen_ (::xercesc::XMLFormatTarget& t,
           const ::supermen& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::supermen_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
supermen_ (::xercesc::XMLFormatTarget& t,
           const ::supermen& s,
           ::xml_schema::error_handler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::supermen_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
supermen_ (::xercesc::XMLFormatTarget& t,
           const ::supermen& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::supermen_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
supermen_ (::xercesc::DOMDocument& d,
           const ::supermen& s,
           ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "supermen" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "supermen",
      "");
  }
}

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
supermen_ (const ::supermen& s,
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "supermen",
      "",
      m, f));

  ::supermen_ (*d, s, f);
  return d;
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

