// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef EMAIL_IXX
#define EMAIL_IXX

// Begin prologue.
//
//
// End prologue.

namespace email
{
  // binary
  // 

  inline
  const binary::name_type& binary::
  name () const
  {
    return this->name_.get ();
  }

  inline
  binary::name_type& binary::
  name ()
  {
    return this->name_.get ();
  }

  inline
  void binary::
  name (const name_type& x)
  {
    this->name_.set (x);
  }

  inline
  void binary::
  name (::std::auto_ptr< name_type > x)
  {
    this->name_.set (x);
  }

  inline
  const binary::mime_type& binary::
  mime () const
  {
    return this->mime_.get ();
  }

  inline
  binary::mime_type& binary::
  mime ()
  {
    return this->mime_.get ();
  }

  inline
  void binary::
  mime (const mime_type& x)
  {
    this->mime_.set (x);
  }

  inline
  void binary::
  mime (::std::auto_ptr< mime_type > x)
  {
    this->mime_.set (x);
  }


  // envelope
  // 

  inline
  const envelope::to_type& envelope::
  to () const
  {
    return this->to_.get ();
  }

  inline
  envelope::to_type& envelope::
  to ()
  {
    return this->to_.get ();
  }

  inline
  void envelope::
  to (const to_type& x)
  {
    this->to_.set (x);
  }

  inline
  void envelope::
  to (::std::auto_ptr< to_type > x)
  {
    this->to_.set (x);
  }

  inline
  const envelope::from_type& envelope::
  from () const
  {
    return this->from_.get ();
  }

  inline
  envelope::from_type& envelope::
  from ()
  {
    return this->from_.get ();
  }

  inline
  void envelope::
  from (const from_type& x)
  {
    this->from_.set (x);
  }

  inline
  void envelope::
  from (::std::auto_ptr< from_type > x)
  {
    this->from_.set (x);
  }

  inline
  const envelope::subject_type& envelope::
  subject () const
  {
    return this->subject_.get ();
  }

  inline
  envelope::subject_type& envelope::
  subject ()
  {
    return this->subject_.get ();
  }

  inline
  void envelope::
  subject (const subject_type& x)
  {
    this->subject_.set (x);
  }

  inline
  void envelope::
  subject (::std::auto_ptr< subject_type > x)
  {
    this->subject_.set (x);
  }

  inline
  const envelope::any_sequence& envelope::
  any () const
  {
    return this->any_;
  }

  inline
  envelope::any_sequence& envelope::
  any ()
  {
    return this->any_;
  }

  inline
  void envelope::
  any (const any_sequence& s)
  {
    this->any_ = s;
  }

  inline
  const envelope::any_attribute_set& envelope::
  any_attribute () const
  {
    return this->any_attribute_;
  }

  inline
  envelope::any_attribute_set& envelope::
  any_attribute ()
  {
    return this->any_attribute_;
  }

  inline
  void envelope::
  any_attribute (const any_attribute_set& s)
  {
    this->any_attribute_ = s;
  }

  inline
  const ::xercesc::DOMDocument& envelope::
  dom_document () const
  {
    return *dom_document_;
  }

  inline
  ::xercesc::DOMDocument& envelope::
  dom_document ()
  {
    return *dom_document_;
  }
}

// Begin epilogue.
//
//
// End epilogue.

#endif // EMAIL_IXX
