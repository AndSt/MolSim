// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef PROTOCOL_HXX
#define PROTOCOL_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/element-map.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>
#include <xsd/cxx/tree/parsing/element-map.txx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>
#include <xsd/cxx/tree/serialization/element-map.txx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Base class for element types.
  //
  typedef ::xsd::cxx::tree::element_type< char, type > element_type;

  // Root element map.
  //
  typedef ::xsd::cxx::tree::element_map< char, type > element_map;

  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_element_info< char > no_element_info;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }

#ifndef XSD_CXX_TREE_ELEMENT_MAP_INIT__XML_SCHEMA
#define XSD_CXX_TREE_ELEMENT_MAP_INIT__XML_SCHEMA
  static
  const ::xsd::cxx::tree::element_map_init< char, type >
  _xsd_element_map_init;
#endif
}

// Forward declarations.
//
namespace protocol
{
  class account_t;
  class change_t;
  class balance_t;
}


#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace protocol
{
  class account_t: public ::xml_schema::type
  {
    public:
    // account
    // 
    typedef ::xml_schema::unsigned_int account_type;
    typedef ::xsd::cxx::tree::traits< account_type, char > account_traits;

    const account_type&
    account () const;

    account_type&
    account ();

    void
    account (const account_type& x);

    // Constructors.
    //
    account_t (const account_type&);

    account_t (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    account_t (const account_t& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual account_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~account_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< account_type > account_;
  };

  class change_t: public ::protocol::account_t
  {
    public:
    // amount
    // 
    typedef ::xml_schema::unsigned_int amount_type;
    typedef ::xsd::cxx::tree::traits< amount_type, char > amount_traits;

    const amount_type&
    amount () const;

    amount_type&
    amount ();

    void
    amount (const amount_type& x);

    // Constructors.
    //
    change_t (const account_type&,
              const amount_type&);

    change_t (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    change_t (const change_t& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual change_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~change_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< amount_type > amount_;
  };

  class balance_t: public ::protocol::account_t
  {
    public:
    // balance
    // 
    typedef ::xml_schema::unsigned_int balance_type;
    typedef ::xsd::cxx::tree::traits< balance_type, char > balance_traits;

    const balance_type&
    balance () const;

    balance_type&
    balance ();

    void
    balance (const balance_type& x);

    // Constructors.
    //
    balance_t (const account_type&,
               const balance_type&);

    balance_t (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    balance_t (const balance_t& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual balance_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~balance_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< balance_type > balance_;
  };

  class balance: public ::xml_schema::element_type
  {
    public:

    // Element value.
    //
    typedef ::protocol::account_t value_type;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_type&
    value () const;

    value_type&
    value ();

    void
    value (const value_type& x);

    void
    value (::std::auto_ptr< value_type > p);

    virtual const ::xml_schema::type*
    _value () const;

    virtual ::xml_schema::type*
    _value ();

    // Constructors.
    //
    balance (const value_type& x);

    balance (::std::auto_ptr< value_type > p);

    balance (const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0);

    balance (const balance& x, ::xml_schema::flags f = 0);

    virtual balance*
    _clone (::xml_schema::flags f = 0) const;

    // Element name and namespace.
    //
    static const ::std::string&
    name ();

    static const ::std::string&
    namespace_ ();

    virtual const ::std::string&
    _name () const;

    virtual const ::std::string&
    _namespace () const;

    virtual 
    ~balance ();

    protected:
    ::xsd::cxx::tree::one< value_type > value_;
    static const ::std::string name_;
    static const ::std::string namespace__;
  };

  class withdraw: public ::xml_schema::element_type
  {
    public:

    // Element value.
    //
    typedef ::protocol::change_t value_type;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_type&
    value () const;

    value_type&
    value ();

    void
    value (const value_type& x);

    void
    value (::std::auto_ptr< value_type > p);

    virtual const ::xml_schema::type*
    _value () const;

    virtual ::xml_schema::type*
    _value ();

    // Constructors.
    //
    withdraw (const value_type& x);

    withdraw (::std::auto_ptr< value_type > p);

    withdraw (const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0);

    withdraw (const withdraw& x, ::xml_schema::flags f = 0);

    virtual withdraw*
    _clone (::xml_schema::flags f = 0) const;

    // Element name and namespace.
    //
    static const ::std::string&
    name ();

    static const ::std::string&
    namespace_ ();

    virtual const ::std::string&
    _name () const;

    virtual const ::std::string&
    _namespace () const;

    virtual 
    ~withdraw ();

    protected:
    ::xsd::cxx::tree::one< value_type > value_;
    static const ::std::string name_;
    static const ::std::string namespace__;
  };

  class deposit: public ::xml_schema::element_type
  {
    public:

    // Element value.
    //
    typedef ::protocol::change_t value_type;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_type&
    value () const;

    value_type&
    value ();

    void
    value (const value_type& x);

    void
    value (::std::auto_ptr< value_type > p);

    virtual const ::xml_schema::type*
    _value () const;

    virtual ::xml_schema::type*
    _value ();

    // Constructors.
    //
    deposit (const value_type& x);

    deposit (::std::auto_ptr< value_type > p);

    deposit (const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0);

    deposit (const deposit& x, ::xml_schema::flags f = 0);

    virtual deposit*
    _clone (::xml_schema::flags f = 0) const;

    // Element name and namespace.
    //
    static const ::std::string&
    name ();

    static const ::std::string&
    namespace_ ();

    virtual const ::std::string&
    _name () const;

    virtual const ::std::string&
    _namespace () const;

    virtual 
    ~deposit ();

    protected:
    ::xsd::cxx::tree::one< value_type > value_;
    static const ::std::string name_;
    static const ::std::string namespace__;
  };

  class success: public ::xml_schema::element_type
  {
    public:

    // Element value.
    //
    typedef ::protocol::balance_t value_type;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_type&
    value () const;

    value_type&
    value ();

    void
    value (const value_type& x);

    void
    value (::std::auto_ptr< value_type > p);

    virtual const ::xml_schema::type*
    _value () const;

    virtual ::xml_schema::type*
    _value ();

    // Constructors.
    //
    success (const value_type& x);

    success (::std::auto_ptr< value_type > p);

    success (const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0);

    success (const success& x, ::xml_schema::flags f = 0);

    virtual success*
    _clone (::xml_schema::flags f = 0) const;

    // Element name and namespace.
    //
    static const ::std::string&
    name ();

    static const ::std::string&
    namespace_ ();

    virtual const ::std::string&
    _name () const;

    virtual const ::std::string&
    _namespace () const;

    virtual 
    ~success ();

    protected:
    ::xsd::cxx::tree::one< value_type > value_;
    static const ::std::string name_;
    static const ::std::string namespace__;
  };

  class insufficient_funds: public ::xml_schema::element_type
  {
    public:

    // Element value.
    //
    typedef ::protocol::balance_t value_type;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_type&
    value () const;

    value_type&
    value ();

    void
    value (const value_type& x);

    void
    value (::std::auto_ptr< value_type > p);

    virtual const ::xml_schema::type*
    _value () const;

    virtual ::xml_schema::type*
    _value ();

    // Constructors.
    //
    insufficient_funds (const value_type& x);

    insufficient_funds (::std::auto_ptr< value_type > p);

    insufficient_funds (const ::xercesc::DOMElement& e, ::xml_schema::flags f = 0);

    insufficient_funds (const insufficient_funds& x, ::xml_schema::flags f = 0);

    virtual insufficient_funds*
    _clone (::xml_schema::flags f = 0) const;

    // Element name and namespace.
    //
    static const ::std::string&
    name ();

    static const ::std::string&
    namespace_ ();

    virtual const ::std::string&
    _name () const;

    virtual const ::std::string&
    _namespace () const;

    virtual 
    ~insufficient_funds ();

    protected:
    ::xsd::cxx::tree::one< value_type > value_;
    static const ::std::string name_;
    static const ::std::string namespace__;
  };
}

namespace protocol
{
  void
  operator<< (::xercesc::DOMElement&, const account_t&);

  void
  operator<< (::xercesc::DOMElement&, const change_t&);

  void
  operator<< (::xercesc::DOMElement&, const balance_t&);

  void
  operator<< (::xercesc::DOMElement&, const balance&);

  void
  operator<< (::xercesc::DOMElement&, const withdraw&);

  void
  operator<< (::xercesc::DOMElement&, const deposit&);

  void
  operator<< (::xercesc::DOMElement&, const success&);

  void
  operator<< (::xercesc::DOMElement&, const insufficient_funds&);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // PROTOCOL_HXX
