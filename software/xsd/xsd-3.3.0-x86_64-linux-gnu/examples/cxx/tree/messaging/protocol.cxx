// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "protocol.hxx"

namespace protocol
{
  // account_t
  // 

  const account_t::account_type& account_t::
  account () const
  {
    return this->account_.get ();
  }

  account_t::account_type& account_t::
  account ()
  {
    return this->account_.get ();
  }

  void account_t::
  account (const account_type& x)
  {
    this->account_.set (x);
  }


  // change_t
  // 

  const change_t::amount_type& change_t::
  amount () const
  {
    return this->amount_.get ();
  }

  change_t::amount_type& change_t::
  amount ()
  {
    return this->amount_.get ();
  }

  void change_t::
  amount (const amount_type& x)
  {
    this->amount_.set (x);
  }


  // balance_t
  // 

  const balance_t::balance_type& balance_t::
  balance () const
  {
    return this->balance_.get ();
  }

  balance_t::balance_type& balance_t::
  balance ()
  {
    return this->balance_.get ();
  }

  void balance_t::
  balance (const balance_type& x)
  {
    this->balance_.set (x);
  }


  // balance
  // 

  const balance::value_type& balance::
  value () const
  {
    return this->value_.get ();
  }

  balance::value_type& balance::
  value ()
  {
    return this->value_.get ();
  }

  void balance::
  value (const value_type& x)
  {
    return this->value_.set (x);
  }

  void balance::
  value (::std::auto_ptr< value_type > p)
  {
    return this->value_.set (p);
  }

  // withdraw
  // 

  const withdraw::value_type& withdraw::
  value () const
  {
    return this->value_.get ();
  }

  withdraw::value_type& withdraw::
  value ()
  {
    return this->value_.get ();
  }

  void withdraw::
  value (const value_type& x)
  {
    return this->value_.set (x);
  }

  void withdraw::
  value (::std::auto_ptr< value_type > p)
  {
    return this->value_.set (p);
  }

  // deposit
  // 

  const deposit::value_type& deposit::
  value () const
  {
    return this->value_.get ();
  }

  deposit::value_type& deposit::
  value ()
  {
    return this->value_.get ();
  }

  void deposit::
  value (const value_type& x)
  {
    return this->value_.set (x);
  }

  void deposit::
  value (::std::auto_ptr< value_type > p)
  {
    return this->value_.set (p);
  }

  // success
  // 

  const success::value_type& success::
  value () const
  {
    return this->value_.get ();
  }

  success::value_type& success::
  value ()
  {
    return this->value_.get ();
  }

  void success::
  value (const value_type& x)
  {
    return this->value_.set (x);
  }

  void success::
  value (::std::auto_ptr< value_type > p)
  {
    return this->value_.set (p);
  }

  // insufficient_funds
  // 

  const insufficient_funds::value_type& insufficient_funds::
  value () const
  {
    return this->value_.get ();
  }

  insufficient_funds::value_type& insufficient_funds::
  value ()
  {
    return this->value_.get ();
  }

  void insufficient_funds::
  value (const value_type& x)
  {
    return this->value_.set (x);
  }

  void insufficient_funds::
  value (::std::auto_ptr< value_type > p)
  {
    return this->value_.set (p);
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace protocol
{
  // account_t
  //

  account_t::
  account_t (const account_type& account)
  : ::xml_schema::type (),
    account_ (account, ::xml_schema::flags (), this)
  {
  }

  account_t::
  account_t (const account_t& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    account_ (x.account_, f, this)
  {
  }

  account_t::
  account_t (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    account_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void account_t::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // account
      //
      if (n.name () == "account" && n.namespace_ ().empty ())
      {
        if (!account_.present ())
        {
          this->account_.set (account_traits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!account_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "account",
        "");
    }
  }

  account_t* account_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class account_t (*this, f, c);
  }

  account_t::
  ~account_t ()
  {
  }

  // change_t
  //

  change_t::
  change_t (const account_type& account,
            const amount_type& amount)
  : ::protocol::account_t (account),
    amount_ (amount, ::xml_schema::flags (), this)
  {
  }

  change_t::
  change_t (const change_t& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::protocol::account_t (x, f, c),
    amount_ (x.amount_, f, this)
  {
  }

  change_t::
  change_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::protocol::account_t (e, f | ::xml_schema::flags::base, c),
    amount_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void change_t::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    this->::protocol::account_t::parse (p, f);

    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // amount
      //
      if (n.name () == "amount" && n.namespace_ ().empty ())
      {
        if (!amount_.present ())
        {
          this->amount_.set (amount_traits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!amount_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "amount",
        "");
    }
  }

  change_t* change_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class change_t (*this, f, c);
  }

  change_t::
  ~change_t ()
  {
  }

  // balance_t
  //

  balance_t::
  balance_t (const account_type& account,
             const balance_type& balance)
  : ::protocol::account_t (account),
    balance_ (balance, ::xml_schema::flags (), this)
  {
  }

  balance_t::
  balance_t (const balance_t& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::protocol::account_t (x, f, c),
    balance_ (x.balance_, f, this)
  {
  }

  balance_t::
  balance_t (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::protocol::account_t (e, f | ::xml_schema::flags::base, c),
    balance_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void balance_t::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    this->::protocol::account_t::parse (p, f);

    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // balance
      //
      if (n.name () == "balance" && n.namespace_ ().empty ())
      {
        if (!balance_.present ())
        {
          this->balance_.set (balance_traits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!balance_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "balance",
        "");
    }
  }

  balance_t* balance_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class balance_t (*this, f, c);
  }

  balance_t::
  ~balance_t ()
  {
  }

  // balance
  // 

  const ::xml_schema::type* balance::
  _value () const
  {
    return &this->value_.get ();
  }

  ::xml_schema::type* balance::
  _value ()
  {
    return &this->value_.get ();
  }

  balance::
  balance (const value_type& x)
  : value_ (x, 0, 0)
  {
  }

  balance::
  balance (::std::auto_ptr< value_type > p)
  : value_ (p, 0, 0)
  {
  }

  balance::
  balance (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
  : value_ (f, 0)
  {
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == name_ && n.namespace_ () == namespace__)
      this->value_.set (value_traits::create (e, f, 0));
    else
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (), n.namespace_ (),
        name_, namespace__);
  }

  balance::
  balance (const balance& x, ::xml_schema::flags f)
  : ::xml_schema::element_type (),
    value_ (x.value_, f, 0)
  {
  }

  balance* balance::
  _clone (::xml_schema::flags f) const
  {
    return new class balance (*this, f);
  }

  const ::std::string& balance::
  name ()
  {
    return name_;
  }

  const ::std::string& balance::
  namespace_ ()
  {
    return namespace__;
  }

  const ::std::string& balance::
  _name () const
  {
    return name_;
  }

  const ::std::string& balance::
  _namespace () const
  {
    return namespace__;
  }

  const ::std::string balance::
  name_ ("balance");

  const ::std::string balance::
  namespace__ ("http://www.codesynthesis.com/protocol");

  balance::
  ~balance ()
  {
  }

  static 
  const ::xsd::cxx::tree::parser_init< balance, char, ::xml_schema::type >
  _xsd_balance_parser_init (balance::name (), balance::namespace_ ());

  // withdraw
  // 

  const ::xml_schema::type* withdraw::
  _value () const
  {
    return &this->value_.get ();
  }

  ::xml_schema::type* withdraw::
  _value ()
  {
    return &this->value_.get ();
  }

  withdraw::
  withdraw (const value_type& x)
  : value_ (x, 0, 0)
  {
  }

  withdraw::
  withdraw (::std::auto_ptr< value_type > p)
  : value_ (p, 0, 0)
  {
  }

  withdraw::
  withdraw (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
  : value_ (f, 0)
  {
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == name_ && n.namespace_ () == namespace__)
      this->value_.set (value_traits::create (e, f, 0));
    else
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (), n.namespace_ (),
        name_, namespace__);
  }

  withdraw::
  withdraw (const withdraw& x, ::xml_schema::flags f)
  : ::xml_schema::element_type (),
    value_ (x.value_, f, 0)
  {
  }

  withdraw* withdraw::
  _clone (::xml_schema::flags f) const
  {
    return new class withdraw (*this, f);
  }

  const ::std::string& withdraw::
  name ()
  {
    return name_;
  }

  const ::std::string& withdraw::
  namespace_ ()
  {
    return namespace__;
  }

  const ::std::string& withdraw::
  _name () const
  {
    return name_;
  }

  const ::std::string& withdraw::
  _namespace () const
  {
    return namespace__;
  }

  const ::std::string withdraw::
  name_ ("withdraw");

  const ::std::string withdraw::
  namespace__ ("http://www.codesynthesis.com/protocol");

  withdraw::
  ~withdraw ()
  {
  }

  static 
  const ::xsd::cxx::tree::parser_init< withdraw, char, ::xml_schema::type >
  _xsd_withdraw_parser_init (withdraw::name (), withdraw::namespace_ ());

  // deposit
  // 

  const ::xml_schema::type* deposit::
  _value () const
  {
    return &this->value_.get ();
  }

  ::xml_schema::type* deposit::
  _value ()
  {
    return &this->value_.get ();
  }

  deposit::
  deposit (const value_type& x)
  : value_ (x, 0, 0)
  {
  }

  deposit::
  deposit (::std::auto_ptr< value_type > p)
  : value_ (p, 0, 0)
  {
  }

  deposit::
  deposit (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
  : value_ (f, 0)
  {
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == name_ && n.namespace_ () == namespace__)
      this->value_.set (value_traits::create (e, f, 0));
    else
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (), n.namespace_ (),
        name_, namespace__);
  }

  deposit::
  deposit (const deposit& x, ::xml_schema::flags f)
  : ::xml_schema::element_type (),
    value_ (x.value_, f, 0)
  {
  }

  deposit* deposit::
  _clone (::xml_schema::flags f) const
  {
    return new class deposit (*this, f);
  }

  const ::std::string& deposit::
  name ()
  {
    return name_;
  }

  const ::std::string& deposit::
  namespace_ ()
  {
    return namespace__;
  }

  const ::std::string& deposit::
  _name () const
  {
    return name_;
  }

  const ::std::string& deposit::
  _namespace () const
  {
    return namespace__;
  }

  const ::std::string deposit::
  name_ ("deposit");

  const ::std::string deposit::
  namespace__ ("http://www.codesynthesis.com/protocol");

  deposit::
  ~deposit ()
  {
  }

  static 
  const ::xsd::cxx::tree::parser_init< deposit, char, ::xml_schema::type >
  _xsd_deposit_parser_init (deposit::name (), deposit::namespace_ ());

  // success
  // 

  const ::xml_schema::type* success::
  _value () const
  {
    return &this->value_.get ();
  }

  ::xml_schema::type* success::
  _value ()
  {
    return &this->value_.get ();
  }

  success::
  success (const value_type& x)
  : value_ (x, 0, 0)
  {
  }

  success::
  success (::std::auto_ptr< value_type > p)
  : value_ (p, 0, 0)
  {
  }

  success::
  success (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
  : value_ (f, 0)
  {
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == name_ && n.namespace_ () == namespace__)
      this->value_.set (value_traits::create (e, f, 0));
    else
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (), n.namespace_ (),
        name_, namespace__);
  }

  success::
  success (const success& x, ::xml_schema::flags f)
  : ::xml_schema::element_type (),
    value_ (x.value_, f, 0)
  {
  }

  success* success::
  _clone (::xml_schema::flags f) const
  {
    return new class success (*this, f);
  }

  const ::std::string& success::
  name ()
  {
    return name_;
  }

  const ::std::string& success::
  namespace_ ()
  {
    return namespace__;
  }

  const ::std::string& success::
  _name () const
  {
    return name_;
  }

  const ::std::string& success::
  _namespace () const
  {
    return namespace__;
  }

  const ::std::string success::
  name_ ("success");

  const ::std::string success::
  namespace__ ("http://www.codesynthesis.com/protocol");

  success::
  ~success ()
  {
  }

  static 
  const ::xsd::cxx::tree::parser_init< success, char, ::xml_schema::type >
  _xsd_success_parser_init (success::name (), success::namespace_ ());

  // insufficient_funds
  // 

  const ::xml_schema::type* insufficient_funds::
  _value () const
  {
    return &this->value_.get ();
  }

  ::xml_schema::type* insufficient_funds::
  _value ()
  {
    return &this->value_.get ();
  }

  insufficient_funds::
  insufficient_funds (const value_type& x)
  : value_ (x, 0, 0)
  {
  }

  insufficient_funds::
  insufficient_funds (::std::auto_ptr< value_type > p)
  : value_ (p, 0, 0)
  {
  }

  insufficient_funds::
  insufficient_funds (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
  : value_ (f, 0)
  {
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == name_ && n.namespace_ () == namespace__)
      this->value_.set (value_traits::create (e, f, 0));
    else
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (), n.namespace_ (),
        name_, namespace__);
  }

  insufficient_funds::
  insufficient_funds (const insufficient_funds& x, ::xml_schema::flags f)
  : ::xml_schema::element_type (),
    value_ (x.value_, f, 0)
  {
  }

  insufficient_funds* insufficient_funds::
  _clone (::xml_schema::flags f) const
  {
    return new class insufficient_funds (*this, f);
  }

  const ::std::string& insufficient_funds::
  name ()
  {
    return name_;
  }

  const ::std::string& insufficient_funds::
  namespace_ ()
  {
    return namespace__;
  }

  const ::std::string& insufficient_funds::
  _name () const
  {
    return name_;
  }

  const ::std::string& insufficient_funds::
  _namespace () const
  {
    return namespace__;
  }

  const ::std::string insufficient_funds::
  name_ ("insufficient-funds");

  const ::std::string insufficient_funds::
  namespace__ ("http://www.codesynthesis.com/protocol");

  insufficient_funds::
  ~insufficient_funds ()
  {
  }

  static 
  const ::xsd::cxx::tree::parser_init< insufficient_funds, char, ::xml_schema::type >
  _xsd_insufficient_funds_parser_init (insufficient_funds::name (), insufficient_funds::namespace_ ());
}

#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace protocol
{
  void
  operator<< (::xercesc::DOMElement& e, const account_t& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // account
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "account",
          e));

      s << i.account ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const change_t& i)
  {
    e << static_cast< const ::protocol::account_t& > (i);

    // amount
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "amount",
          e));

      s << i.amount ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const balance_t& i)
  {
    e << static_cast< const ::protocol::account_t& > (i);

    // balance
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "balance",
          e));

      s << i.balance ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const balance& i)
  {
    e << i.value ();
  }

  static 
  const ::xsd::cxx::tree::serializer_init< balance, char, ::xml_schema::type >
  _xsd_balance_serializer_init (balance::name (), balance::namespace_ ());

  void
  operator<< (::xercesc::DOMElement& e, const withdraw& i)
  {
    e << i.value ();
  }

  static 
  const ::xsd::cxx::tree::serializer_init< withdraw, char, ::xml_schema::type >
  _xsd_withdraw_serializer_init (withdraw::name (), withdraw::namespace_ ());

  void
  operator<< (::xercesc::DOMElement& e, const deposit& i)
  {
    e << i.value ();
  }

  static 
  const ::xsd::cxx::tree::serializer_init< deposit, char, ::xml_schema::type >
  _xsd_deposit_serializer_init (deposit::name (), deposit::namespace_ ());

  void
  operator<< (::xercesc::DOMElement& e, const success& i)
  {
    e << i.value ();
  }

  static 
  const ::xsd::cxx::tree::serializer_init< success, char, ::xml_schema::type >
  _xsd_success_serializer_init (success::name (), success::namespace_ ());

  void
  operator<< (::xercesc::DOMElement& e, const insufficient_funds& i)
  {
    e << i.value ();
  }

  static 
  const ::xsd::cxx::tree::serializer_init< insufficient_funds, char, ::xml_schema::type >
  _xsd_insufficient_funds_serializer_init (insufficient_funds::name (), insufficient_funds::namespace_ ());
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

