// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "position.hxx"

namespace op
{
  // header
  // 

  const header::name_type& header::
  name () const
  {
    return this->name_.get ();
  }

  header::name_type& header::
  name ()
  {
    return this->name_.get ();
  }

  void header::
  name (const name_type& x)
  {
    this->name_.set (x);
  }

  void header::
  name (::std::auto_ptr< name_type > x)
  {
    this->name_.set (x);
  }

  const header::type_type& header::
  type () const
  {
    return this->type_.get ();
  }

  header::type_type& header::
  type ()
  {
    return this->type_.get ();
  }

  void header::
  type (const type_type& x)
  {
    this->type_.set (x);
  }

  void header::
  type (::std::auto_ptr< type_type > x)
  {
    this->type_.set (x);
  }


  // position
  // 

  const position::lat_type& position::
  lat () const
  {
    return this->lat_.get ();
  }

  position::lat_type& position::
  lat ()
  {
    return this->lat_.get ();
  }

  void position::
  lat (const lat_type& x)
  {
    this->lat_.set (x);
  }

  const position::lon_type& position::
  lon () const
  {
    return this->lon_.get ();
  }

  position::lon_type& position::
  lon ()
  {
    return this->lon_.get ();
  }

  void position::
  lon (const lon_type& x)
  {
    this->lon_.set (x);
  }


  // object
  // 

  const object::header_type& object::
  header () const
  {
    return this->header_.get ();
  }

  object::header_type& object::
  header ()
  {
    return this->header_.get ();
  }

  void object::
  header (const header_type& x)
  {
    this->header_.set (x);
  }

  void object::
  header (::std::auto_ptr< header_type > x)
  {
    this->header_.set (x);
  }

  const object::position_sequence& object::
  position () const
  {
    return this->position_;
  }

  object::position_sequence& object::
  position ()
  {
    return this->position_;
  }

  void object::
  position (const position_sequence& s)
  {
    this->position_ = s;
  }

  const object::id_type& object::
  id () const
  {
    return this->id_.get ();
  }

  object::id_type& object::
  id ()
  {
    return this->id_.get ();
  }

  void object::
  id (const id_type& x)
  {
    this->id_.set (x);
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace op
{
  // header
  //

  header::
  header (const name_type& name,
          const type_type& type)
  : ::xml_schema::type (),
    name_ (name, ::xml_schema::flags (), this),
    type_ (type, ::xml_schema::flags (), this)
  {
  }

  header::
  header (const header& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    name_ (x.name_, f, this),
    type_ (x.type_, f, this)
  {
  }

  header::
  header (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    name_ (f, this),
    type_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void header::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // name
      //
      if (n.name () == "name" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< name_type > r (
          name_traits::create (i, f, this));

        if (!name_.present ())
        {
          this->name_.set (r);
          continue;
        }
      }

      // type
      //
      if (n.name () == "type" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< type_type > r (
          type_traits::create (i, f, this));

        if (!type_.present ())
        {
          this->type_.set (r);
          continue;
        }
      }

      break;
    }

    if (!name_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "name",
        "");
    }

    if (!type_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "type",
        "");
    }
  }

  header* header::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class header (*this, f, c);
  }

  header::
  ~header ()
  {
  }

  // position
  //

  position::
  position (const lat_type& lat,
            const lon_type& lon)
  : ::xml_schema::type (),
    lat_ (lat, ::xml_schema::flags (), this),
    lon_ (lon, ::xml_schema::flags (), this)
  {
  }

  position::
  position (const position& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    lat_ (x.lat_, f, this),
    lon_ (x.lon_, f, this)
  {
  }

  position::
  position (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    lat_ (f, this),
    lon_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void position::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "lat" && n.namespace_ ().empty ())
      {
        this->lat_.set (lat_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "lon" && n.namespace_ ().empty ())
      {
        this->lon_.set (lon_traits::create (i, f, this));
        continue;
      }
    }

    if (!lat_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "lat",
        "");
    }

    if (!lon_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "lon",
        "");
    }
  }

  position* position::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class position (*this, f, c);
  }

  position::
  ~position ()
  {
  }

  // object
  //

  object::
  object (const header_type& header,
          const id_type& id)
  : ::xml_schema::type (),
    header_ (header, ::xml_schema::flags (), this),
    position_ (::xml_schema::flags (), this),
    id_ (id, ::xml_schema::flags (), this)
  {
  }

  object::
  object (::std::auto_ptr< header_type >& header,
          const id_type& id)
  : ::xml_schema::type (),
    header_ (header, ::xml_schema::flags (), this),
    position_ (::xml_schema::flags (), this),
    id_ (id, ::xml_schema::flags (), this)
  {
  }

  object::
  object (const object& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    header_ (x.header_, f, this),
    position_ (x.position_, f, this),
    id_ (x.id_, f, this)
  {
  }

  object::
  object (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    header_ (f, this),
    position_ (f, this),
    id_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
      this->parse (p, f);
    }
  }

  void object::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // header
      //
      if (n.name () == "header" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< header_type > r (
          header_traits::create (i, f, this));

        if (!header_.present ())
        {
          this->header_.set (r);
          continue;
        }
      }

      // position
      //
      if (n.name () == "position" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< position_type > r (
          position_traits::create (i, f, this));

        this->position_.push_back (r);
        continue;
      }

      break;
    }

    if (!header_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "header",
        "");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }
    }

    if (!id_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "id",
        "");
    }
  }

  object* object::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class object (*this, f, c);
  }

  object::
  ~object ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace op
{
  ::std::auto_ptr< ::op::object >
  object_ (const ::std::string& u,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::op::object > r (
      ::op::object_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::op::object >
  object_ (const ::std::string& u,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::op::object > r (
      ::op::object_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::op::object >
  object_ (const ::std::string& u,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::op::object > r (
      ::op::object_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::op::object >
  object_ (::std::istream& is,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::op::object_ (isrc, f, p);
  }

  ::std::auto_ptr< ::op::object >
  object_ (::std::istream& is,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::op::object_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::op::object >
  object_ (::std::istream& is,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::op::object_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::op::object >
  object_ (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::op::object_ (isrc, f, p);
  }

  ::std::auto_ptr< ::op::object >
  object_ (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::op::object_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::op::object >
  object_ (::std::istream& is,
           const ::std::string& sid,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::op::object_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::op::object >
  object_ (::xercesc::InputSource& i,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::op::object > r (
      ::op::object_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::op::object >
  object_ (::xercesc::InputSource& i,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::op::object > r (
      ::op::object_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::op::object >
  object_ (::xercesc::InputSource& i,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::op::object > r (
      ::op::object_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::op::object >
  object_ (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::op::object > r (
        ::op::object_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "object" &&
        n.namespace_ () == "http://www.codesynthesis.com/op")
    {
      ::std::auto_ptr< ::op::object > r (
        ::xsd::cxx::tree::traits< ::op::object, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "object",
      "http://www.codesynthesis.com/op");
  }

  ::std::auto_ptr< ::op::object >
  object_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
           ::xml_schema::flags f,
           const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "object" &&
        n.namespace_ () == "http://www.codesynthesis.com/op")
    {
      ::std::auto_ptr< ::op::object > r (
        ::xsd::cxx::tree::traits< ::op::object, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "object",
      "http://www.codesynthesis.com/op");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace op
{
  void
  operator<< (::xercesc::DOMElement& e, const header& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // name
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "name",
          e));

      s << i.name ();
    }

    // type
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "type",
          e));

      s << i.type ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const position& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // lat
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "lat",
          e));

      a << i.lat ();
    }

    // lon
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "lon",
          e));

      a << i.lon ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const object& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // header
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "header",
          e));

      s << i.header ();
    }

    // position
    //
    for (object::position_const_iterator
         b (i.position ().begin ()), n (i.position ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "position",
          e));

      s << *b;
    }

    // id
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          e));

      a << i.id ();
    }
  }

  void
  object_ (::std::ostream& o,
           const ::op::object& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::op::object_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  object_ (::std::ostream& o,
           const ::op::object& s,
           ::xml_schema::error_handler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::op::object_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  object_ (::std::ostream& o,
           const ::op::object& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::op::object_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  object_ (::xercesc::XMLFormatTarget& t,
           const ::op::object& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::op::object_ (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  object_ (::xercesc::XMLFormatTarget& t,
           const ::op::object& s,
           ::xml_schema::error_handler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::op::object_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  object_ (::xercesc::XMLFormatTarget& t,
           const ::op::object& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::op::object_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  object_ (::xercesc::DOMDocument& d,
           const ::op::object& s,
           ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "object" &&
        n.namespace_ () == "http://www.codesynthesis.com/op")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "object",
        "http://www.codesynthesis.com/op");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  object_ (const ::op::object& s,
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "object",
        "http://www.codesynthesis.com/op",
        m, f));

    ::op::object_ (*d, s, f);
    return d;
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

