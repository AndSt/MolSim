// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef PEOPLE_IXX
#define PEOPLE_IXX

// Begin prologue.
//
//
// End prologue.

namespace people
{
  // gender
  // 

  inline
  gender::
  gender (value v)
  : ::xml_schema::string (_xsd_gender_literals_[v])
  {
  }

  inline
  gender::
  gender (const char* v)
  : ::xml_schema::string (v)
  {
  }

  inline
  gender::
  gender (const ::std::string& v)
  : ::xml_schema::string (v)
  {
  }

  inline
  gender::
  gender (const ::xml_schema::string& v)
  : ::xml_schema::string (v)
  {
  }

  inline
  gender::
  gender (const gender& v,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::string (v, f, c)
  {
  }

  inline
  gender& gender::
  operator= (value v)
  {
    static_cast< ::xml_schema::string& > (*this) = 
    ::xml_schema::string (_xsd_gender_literals_[v]);

    return *this;
  }


  // bio_base
  // 


  // person
  // 

  inline
  const person::first_name_type& person::
  first_name () const
  {
    return this->first_name_.get ();
  }

  inline
  person::first_name_type& person::
  first_name ()
  {
    return this->first_name_.get ();
  }

  inline
  void person::
  first_name (const first_name_type& x)
  {
    this->first_name_.set (x);
  }

  inline
  void person::
  first_name (::std::auto_ptr< first_name_type > x)
  {
    this->first_name_.set (x);
  }

  inline
  const person::last_name_type& person::
  last_name () const
  {
    return this->last_name_.get ();
  }

  inline
  person::last_name_type& person::
  last_name ()
  {
    return this->last_name_.get ();
  }

  inline
  void person::
  last_name (const last_name_type& x)
  {
    this->last_name_.set (x);
  }

  inline
  void person::
  last_name (::std::auto_ptr< last_name_type > x)
  {
    this->last_name_.set (x);
  }

  inline
  const person::gender_type& person::
  gender () const
  {
    return this->gender_.get ();
  }

  inline
  person::gender_type& person::
  gender ()
  {
    return this->gender_.get ();
  }

  inline
  void person::
  gender (const gender_type& x)
  {
    this->gender_.set (x);
  }

  inline
  void person::
  gender (::std::auto_ptr< gender_type > x)
  {
    this->gender_.set (x);
  }

  inline
  const person::age_type& person::
  age () const
  {
    return this->age_.get ();
  }

  inline
  person::age_type& person::
  age ()
  {
    return this->age_.get ();
  }

  inline
  void person::
  age (const age_type& x)
  {
    this->age_.set (x);
  }

  inline
  const person::bio_type& person::
  bio () const
  {
    return this->bio_.get ();
  }

  inline
  person::bio_type& person::
  bio ()
  {
    return this->bio_.get ();
  }

  inline
  void person::
  bio (const bio_type& x)
  {
    this->bio_.set (x);
  }

  inline
  void person::
  bio (::std::auto_ptr< bio_type > x)
  {
    this->bio_.set (x);
  }


  // directory
  // 

  inline
  const directory::person_sequence& directory::
  person () const
  {
    return this->person_;
  }

  inline
  directory::person_sequence& directory::
  person ()
  {
    return this->person_;
  }

  inline
  void directory::
  person (const person_sequence& s)
  {
    this->person_ = s;
  }
}

// Begin epilogue.
//
//
// End epilogue.

#endif // PEOPLE_IXX
