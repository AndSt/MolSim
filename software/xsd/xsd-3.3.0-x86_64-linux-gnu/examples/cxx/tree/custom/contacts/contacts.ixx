// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CONTACTS_IXX
#define CONTACTS_IXX

// Begin prologue.
//
//
// End prologue.

namespace contacts
{
  // contact_base
  // 

  inline
  const contact_base::name_type& contact_base::
  name () const
  {
    return this->name_.get ();
  }

  inline
  contact_base::name_type& contact_base::
  name ()
  {
    return this->name_.get ();
  }

  inline
  void contact_base::
  name (const name_type& x)
  {
    this->name_.set (x);
  }

  inline
  void contact_base::
  name (::std::auto_ptr< name_type > x)
  {
    this->name_.set (x);
  }

  inline
  const contact_base::email_type& contact_base::
  email () const
  {
    return this->email_.get ();
  }

  inline
  contact_base::email_type& contact_base::
  email ()
  {
    return this->email_.get ();
  }

  inline
  void contact_base::
  email (const email_type& x)
  {
    this->email_.set (x);
  }

  inline
  void contact_base::
  email (::std::auto_ptr< email_type > x)
  {
    this->email_.set (x);
  }

  inline
  const contact_base::phone_type& contact_base::
  phone () const
  {
    return this->phone_.get ();
  }

  inline
  contact_base::phone_type& contact_base::
  phone ()
  {
    return this->phone_.get ();
  }

  inline
  void contact_base::
  phone (const phone_type& x)
  {
    this->phone_.set (x);
  }

  inline
  void contact_base::
  phone (::std::auto_ptr< phone_type > x)
  {
    this->phone_.set (x);
  }


  // catalog
  // 

  inline
  const catalog::contact_sequence& catalog::
  contact () const
  {
    return this->contact_;
  }

  inline
  catalog::contact_sequence& catalog::
  contact ()
  {
    return this->contact_;
  }

  inline
  void catalog::
  contact (const contact_sequence& s)
  {
    this->contact_ = s;
  }
}

// Begin epilogue.
//
//
// End epilogue.

#endif // CONTACTS_IXX
