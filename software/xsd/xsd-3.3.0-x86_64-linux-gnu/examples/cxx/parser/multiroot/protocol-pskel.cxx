// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "protocol-pskel.hxx"

namespace protocol
{
  // request_pskel
  //

  void request_pskel::
  account_parser (::xml_schema::unsigned_int_pskel& p)
  {
    this->account_parser_ = &p;
  }

  void request_pskel::
  parsers (::xml_schema::unsigned_int_pskel& account)
  {
    this->account_parser_ = &account;
  }

  request_pskel::
  request_pskel ()
  : account_parser_ (0)
  {
  }

  // withdraw_pskel
  //

  void withdraw_pskel::
  amount_parser (::xml_schema::unsigned_int_pskel& p)
  {
    this->amount_parser_ = &p;
  }

  void withdraw_pskel::
  parsers (::xml_schema::unsigned_int_pskel& account,
           ::xml_schema::unsigned_int_pskel& amount)
  {
    this->account_parser_ = &account;
    this->amount_parser_ = &amount;
  }

  withdraw_pskel::
  withdraw_pskel ()
  : amount_parser_ (0)
  {
  }

  // deposit_pskel
  //

  void deposit_pskel::
  amount_parser (::xml_schema::unsigned_int_pskel& p)
  {
    this->amount_parser_ = &p;
  }

  void deposit_pskel::
  parsers (::xml_schema::unsigned_int_pskel& account,
           ::xml_schema::unsigned_int_pskel& amount)
  {
    this->account_parser_ = &account;
    this->amount_parser_ = &amount;
  }

  deposit_pskel::
  deposit_pskel ()
  : amount_parser_ (0)
  {
  }
}

namespace protocol
{
  // request_pskel
  //

  void request_pskel::
  account (unsigned int)
  {
  }

  bool request_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "account" && ns.empty ())
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->account_parser_;

      if (this->account_parser_)
        this->account_parser_->pre ();

      return true;
    }

    return false;
  }

  bool request_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "account" && ns.empty ())
    {
      if (this->account_parser_)
        this->account (this->account_parser_->post_unsigned_int ());

      return true;
    }

    return false;
  }

  // withdraw_pskel
  //

  void withdraw_pskel::
  amount (unsigned int)
  {
  }

  bool withdraw_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::protocol::request_pskel::_start_element_impl (ns, n, t))
      return true;

    if (n == "amount" && ns.empty ())
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->amount_parser_;

      if (this->amount_parser_)
        this->amount_parser_->pre ();

      return true;
    }

    return false;
  }

  bool withdraw_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::protocol::request_pskel::_end_element_impl (ns, n))
      return true;

    if (n == "amount" && ns.empty ())
    {
      if (this->amount_parser_)
        this->amount (this->amount_parser_->post_unsigned_int ());

      return true;
    }

    return false;
  }

  // deposit_pskel
  //

  void deposit_pskel::
  amount (unsigned int)
  {
  }

  void deposit_pskel::
  post_deposit ()
  {
  }

  bool deposit_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::protocol::request_pskel::_start_element_impl (ns, n, t))
      return true;

    if (n == "amount" && ns.empty ())
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->amount_parser_;

      if (this->amount_parser_)
        this->amount_parser_->pre ();

      return true;
    }

    return false;
  }

  bool deposit_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::protocol::request_pskel::_end_element_impl (ns, n))
      return true;

    if (n == "amount" && ns.empty ())
    {
      if (this->amount_parser_)
        this->amount (this->amount_parser_->post_unsigned_int ());

      return true;
    }

    return false;
  }
}

// Begin epilogue.
//
//
// End epilogue.

