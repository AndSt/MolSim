// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "email-pskel.hxx"

namespace email
{
  // binary_pskel
  //

  void binary_pskel::
  name_parser (::xml_schema::string_pskel& p)
  {
    this->name_parser_ = &p;
  }

  void binary_pskel::
  mime_parser (::xml_schema::string_pskel& p)
  {
    this->mime_parser_ = &p;
  }

  void binary_pskel::
  parsers (::xml_schema::string_pskel& name,
           ::xml_schema::string_pskel& mime)
  {
    this->name_parser_ = &name;
    this->mime_parser_ = &mime;
  }

  binary_pskel::
  binary_pskel ()
  : name_parser_ (0),
    mime_parser_ (0)
  {
  }

  // envelope_pskel
  //

  void envelope_pskel::
  to_parser (::xml_schema::string_pskel& p)
  {
    this->to_parser_ = &p;
  }

  void envelope_pskel::
  from_parser (::xml_schema::string_pskel& p)
  {
    this->from_parser_ = &p;
  }

  void envelope_pskel::
  subject_parser (::xml_schema::string_pskel& p)
  {
    this->subject_parser_ = &p;
  }

  void envelope_pskel::
  parsers (::xml_schema::string_pskel& to,
           ::xml_schema::string_pskel& from,
           ::xml_schema::string_pskel& subject)
  {
    this->to_parser_ = &to;
    this->from_parser_ = &from;
    this->subject_parser_ = &subject;
  }

  envelope_pskel::
  envelope_pskel ()
  : to_parser_ (0),
    from_parser_ (0),
    subject_parser_ (0)
  {
  }
}

namespace email
{
  // binary_pskel
  //

  void binary_pskel::
  name (const ::std::string&)
  {
  }

  void binary_pskel::
  mime (const ::std::string&)
  {
  }

  void binary_pskel::
  post_binary ()
  {
  }

  bool binary_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::base64_binary_pskel::_attribute_impl (ns, n, v))
      return true;

    if (n == "name" && ns.empty ())
    {
      if (this->name_parser_)
      {
        this->name_parser_->pre ();
        this->name_parser_->_pre_impl ();
        this->name_parser_->_characters (v);
        this->name_parser_->_post_impl ();
        this->name (this->name_parser_->post_string ());
      }

      return true;
    }

    if (n == "mime" && ns.empty ())
    {
      if (this->mime_parser_)
      {
        this->mime_parser_->pre ();
        this->mime_parser_->_pre_impl ();
        this->mime_parser_->_characters (v);
        this->mime_parser_->_post_impl ();
        this->mime (this->mime_parser_->post_string ());
      }

      return true;
    }

    return false;
  }

  // envelope_pskel
  //

  void envelope_pskel::
  to (const ::std::string&)
  {
  }

  void envelope_pskel::
  from (const ::std::string&)
  {
  }

  void envelope_pskel::
  subject (const ::std::string&)
  {
  }

  void envelope_pskel::
  post_envelope ()
  {
  }

  bool envelope_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "to" && ns.empty ())
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->to_parser_;

      if (this->to_parser_)
        this->to_parser_->pre ();

      return true;
    }

    if (n == "from" && ns.empty ())
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->from_parser_;

      if (this->from_parser_)
        this->from_parser_->pre ();

      return true;
    }

    if (n == "subject" && ns.empty ())
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->subject_parser_;

      if (this->subject_parser_)
        this->subject_parser_->pre ();

      return true;
    }

    return false;
  }

  bool envelope_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "to" && ns.empty ())
    {
      if (this->to_parser_)
        this->to (this->to_parser_->post_string ());

      return true;
    }

    if (n == "from" && ns.empty ())
    {
      if (this->from_parser_)
        this->from (this->from_parser_->post_string ());

      return true;
    }

    if (n == "subject" && ns.empty ())
    {
      if (this->subject_parser_)
        this->subject (this->subject_parser_->post_string ());

      return true;
    }

    return false;
  }
}

// Begin epilogue.
//
//
// End epilogue.

