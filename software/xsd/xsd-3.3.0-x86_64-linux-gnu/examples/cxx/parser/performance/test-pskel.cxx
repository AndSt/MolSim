// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "test-pskel.hxx"

namespace test
{
  // enum_pskel
  //

  void enum_pskel::
  post_enum ()
  {
  }

  // record_pskel
  //

  void record_pskel::
  int_ (unsigned int)
  {
  }

  void record_pskel::
  double_ (double)
  {
  }

  void record_pskel::
  name (const ::std::string&)
  {
  }

  void record_pskel::
  string (const ::std::string&)
  {
  }

  void record_pskel::
  choice1 (const ::std::string&)
  {
  }

  void record_pskel::
  choice2 (const ::std::string&)
  {
  }

  void record_pskel::
  choice3 (const ::std::string&)
  {
  }

  void record_pskel::
  choice4 (const ::std::string&)
  {
  }

  void record_pskel::
  enum_ ()
  {
  }

  void record_pskel::
  apple (bool)
  {
  }

  void record_pskel::
  orange (unsigned long long)
  {
  }

  void record_pskel::
  post_record ()
  {
  }

  bool record_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "int" && ns.empty ())
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->int__parser_;

      if (this->int__parser_)
        this->int__parser_->pre ();

      return true;
    }

    if (n == "double" && ns.empty ())
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->double__parser_;

      if (this->double__parser_)
        this->double__parser_->pre ();

      return true;
    }

    if (n == "name" && ns.empty ())
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->name_parser_;

      if (this->name_parser_)
        this->name_parser_->pre ();

      return true;
    }

    if (n == "string" && ns.empty ())
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->string_parser_;

      if (this->string_parser_)
        this->string_parser_->pre ();

      return true;
    }

    if (n == "choice1" && ns.empty ())
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->choice1_parser_;

      if (this->choice1_parser_)
        this->choice1_parser_->pre ();

      return true;
    }

    if (n == "choice2" && ns.empty ())
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->choice2_parser_;

      if (this->choice2_parser_)
        this->choice2_parser_->pre ();

      return true;
    }

    if (n == "choice3" && ns.empty ())
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->choice3_parser_;

      if (this->choice3_parser_)
        this->choice3_parser_->pre ();

      return true;
    }

    if (n == "choice4" && ns.empty ())
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->choice4_parser_;

      if (this->choice4_parser_)
        this->choice4_parser_->pre ();

      return true;
    }

    if (n == "enum" && ns.empty ())
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->enum__parser_;

      if (this->enum__parser_)
        this->enum__parser_->pre ();

      return true;
    }

    return false;
  }

  bool record_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "int" && ns.empty ())
    {
      if (this->int__parser_)
        this->int_ (this->int__parser_->post_unsigned_int ());

      return true;
    }

    if (n == "double" && ns.empty ())
    {
      if (this->double__parser_)
        this->double_ (this->double__parser_->post_double ());

      return true;
    }

    if (n == "name" && ns.empty ())
    {
      if (this->name_parser_)
        this->name (this->name_parser_->post_ncname ());

      return true;
    }

    if (n == "string" && ns.empty ())
    {
      if (this->string_parser_)
        this->string (this->string_parser_->post_string ());

      return true;
    }

    if (n == "choice1" && ns.empty ())
    {
      if (this->choice1_parser_)
        this->choice1 (this->choice1_parser_->post_string ());

      return true;
    }

    if (n == "choice2" && ns.empty ())
    {
      if (this->choice2_parser_)
        this->choice2 (this->choice2_parser_->post_string ());

      return true;
    }

    if (n == "choice3" && ns.empty ())
    {
      if (this->choice3_parser_)
        this->choice3 (this->choice3_parser_->post_string ());

      return true;
    }

    if (n == "choice4" && ns.empty ())
    {
      if (this->choice4_parser_)
        this->choice4 (this->choice4_parser_->post_string ());

      return true;
    }

    if (n == "enum" && ns.empty ())
    {
      if (this->enum__parser_)
      {
        this->enum__parser_->post_enum ();
        this->enum_ ();
      }

      return true;
    }

    return false;
  }

  bool record_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
      return true;

    if (n == "apple" && ns.empty ())
    {
      if (this->apple_parser_)
      {
        this->apple_parser_->pre ();
        this->apple_parser_->_pre_impl ();
        this->apple_parser_->_characters (v);
        this->apple_parser_->_post_impl ();
        this->apple (this->apple_parser_->post_boolean ());
      }

      return true;
    }

    if (n == "orange" && ns.empty ())
    {
      if (this->orange_parser_)
      {
        this->orange_parser_->pre ();
        this->orange_parser_->_pre_impl ();
        this->orange_parser_->_characters (v);
        this->orange_parser_->_post_impl ();
        this->orange (this->orange_parser_->post_unsigned_long ());
      }

      return true;
    }

    return false;
  }

  // root_pskel
  //

  void root_pskel::
  record ()
  {
  }

  void root_pskel::
  post_root ()
  {
  }

  bool root_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "record" && ns.empty ())
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->record_parser_;

      if (this->record_parser_)
        this->record_parser_->pre ();

      return true;
    }

    return false;
  }

  bool root_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "record" && ns.empty ())
    {
      if (this->record_parser_)
      {
        this->record_parser_->post_record ();
        this->record ();
      }

      return true;
    }

    return false;
  }
}

// Begin epilogue.
//
//
// End epilogue.

