// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

namespace test
{
  // record_pskel
  //

  inline
  void record_pskel::
  int_parser (::xml_schema::unsigned_int_pskel& p)
  {
    this->int__parser_ = &p;
  }

  inline
  void record_pskel::
  double_parser (::xml_schema::double_pskel& p)
  {
    this->double__parser_ = &p;
  }

  inline
  void record_pskel::
  name_parser (::xml_schema::ncname_pskel& p)
  {
    this->name_parser_ = &p;
  }

  inline
  void record_pskel::
  string_parser (::xml_schema::string_pskel& p)
  {
    this->string_parser_ = &p;
  }

  inline
  void record_pskel::
  choice1_parser (::xml_schema::string_pskel& p)
  {
    this->choice1_parser_ = &p;
  }

  inline
  void record_pskel::
  choice2_parser (::xml_schema::string_pskel& p)
  {
    this->choice2_parser_ = &p;
  }

  inline
  void record_pskel::
  choice3_parser (::xml_schema::string_pskel& p)
  {
    this->choice3_parser_ = &p;
  }

  inline
  void record_pskel::
  choice4_parser (::xml_schema::string_pskel& p)
  {
    this->choice4_parser_ = &p;
  }

  inline
  void record_pskel::
  enum_parser (::test::enum_pskel& p)
  {
    this->enum__parser_ = &p;
  }

  inline
  void record_pskel::
  apple_parser (::xml_schema::boolean_pskel& p)
  {
    this->apple_parser_ = &p;
  }

  inline
  void record_pskel::
  orange_parser (::xml_schema::unsigned_long_pskel& p)
  {
    this->orange_parser_ = &p;
  }

  inline
  void record_pskel::
  parsers (::xml_schema::unsigned_int_pskel& int_,
           ::xml_schema::double_pskel& double_,
           ::xml_schema::ncname_pskel& name,
           ::xml_schema::string_pskel& string,
           ::xml_schema::string_pskel& choice1,
           ::xml_schema::string_pskel& choice2,
           ::xml_schema::string_pskel& choice3,
           ::xml_schema::string_pskel& choice4,
           ::test::enum_pskel& enum_,
           ::xml_schema::boolean_pskel& apple,
           ::xml_schema::unsigned_long_pskel& orange)
  {
    this->int__parser_ = &int_;
    this->double__parser_ = &double_;
    this->name_parser_ = &name;
    this->string_parser_ = &string;
    this->choice1_parser_ = &choice1;
    this->choice2_parser_ = &choice2;
    this->choice3_parser_ = &choice3;
    this->choice4_parser_ = &choice4;
    this->enum__parser_ = &enum_;
    this->apple_parser_ = &apple;
    this->orange_parser_ = &orange;
  }

  inline
  record_pskel::
  record_pskel ()
  : int__parser_ (0),
    double__parser_ (0),
    name_parser_ (0),
    string_parser_ (0),
    choice1_parser_ (0),
    choice2_parser_ (0),
    choice3_parser_ (0),
    choice4_parser_ (0),
    enum__parser_ (0),
    apple_parser_ (0),
    orange_parser_ (0)
  {
  }

  // root_pskel
  //

  inline
  void root_pskel::
  record_parser (::test::record_pskel& p)
  {
    this->record_parser_ = &p;
  }

  inline
  void root_pskel::
  parsers (::test::record_pskel& record)
  {
    this->record_parser_ = &record;
  }

  inline
  root_pskel::
  root_pskel ()
  : record_parser_ (0)
  {
  }
}

// Begin epilogue.
//
//
// End epilogue.

