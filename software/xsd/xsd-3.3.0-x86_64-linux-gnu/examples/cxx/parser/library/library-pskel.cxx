// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "library-pskel.hxx"

namespace library
{
  // title_pskel
  //

  void title_pskel::
  lang (const ::std::string&)
  {
  }

  bool title_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::string_pskel::_attribute_impl (ns, n, v))
      return true;

    if (n == "lang" && ns.empty ())
    {
      if (this->lang_parser_)
      {
        this->lang_parser_->pre ();
        this->lang_parser_->_pre_impl ();
        this->lang_parser_->_characters (v);
        this->lang_parser_->_post_impl ();
        this->lang (this->lang_parser_->post_string ());
      }

      return true;
    }

    return false;
  }

  // person_pskel
  //

  void person_pskel::
  name (const ::std::string&)
  {
  }

  void person_pskel::
  born (const ::std::string&)
  {
  }

  void person_pskel::
  died (const ::std::string&)
  {
  }

  bool person_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "name" && ns.empty ())
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->name_parser_;

      if (this->name_parser_)
        this->name_parser_->pre ();

      return true;
    }

    if (n == "born" && ns.empty ())
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->born_parser_;

      if (this->born_parser_)
        this->born_parser_->pre ();

      return true;
    }

    if (n == "died" && ns.empty ())
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->died_parser_;

      if (this->died_parser_)
        this->died_parser_->pre ();

      return true;
    }

    return false;
  }

  bool person_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "name" && ns.empty ())
    {
      if (this->name_parser_)
        this->name (this->name_parser_->post_string ());

      return true;
    }

    if (n == "born" && ns.empty ())
    {
      if (this->born_parser_)
        this->born (this->born_parser_->post_string ());

      return true;
    }

    if (n == "died" && ns.empty ())
    {
      if (this->died_parser_)
        this->died (this->died_parser_->post_string ());

      return true;
    }

    return false;
  }

  // author_pskel
  //

  void author_pskel::
  recommends (const ::std::string&)
  {
  }

  bool author_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::library::person_pskel::_attribute_impl (ns, n, v))
      return true;

    if (n == "recommends" && ns.empty ())
    {
      if (this->recommends_parser_)
      {
        this->recommends_parser_->pre ();
        this->recommends_parser_->_pre_impl ();
        this->recommends_parser_->_characters (v);
        this->recommends_parser_->_post_impl ();
        this->recommends (this->recommends_parser_->post_idref ());
      }

      return true;
    }

    return false;
  }

  // book_pskel
  //

  void book_pskel::
  isbn (::library::isbn)
  {
  }

  void book_pskel::
  title (const ::library::title&)
  {
  }

  void book_pskel::
  genre (::library::genre)
  {
  }

  void book_pskel::
  author (const ::library::author&)
  {
  }

  void book_pskel::
  available (bool)
  {
  }

  void book_pskel::
  id (const ::std::string&)
  {
  }

  bool book_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "isbn" && ns.empty ())
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->isbn_parser_;

      if (this->isbn_parser_)
        this->isbn_parser_->pre ();

      return true;
    }

    if (n == "title" && ns.empty ())
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->title_parser_;

      if (this->title_parser_)
        this->title_parser_->pre ();

      return true;
    }

    if (n == "genre" && ns.empty ())
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->genre_parser_;

      if (this->genre_parser_)
        this->genre_parser_->pre ();

      return true;
    }

    if (n == "author" && ns.empty ())
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->author_parser_;

      if (this->author_parser_)
        this->author_parser_->pre ();

      return true;
    }

    return false;
  }

  bool book_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "isbn" && ns.empty ())
    {
      if (this->isbn_parser_)
        this->isbn (this->isbn_parser_->post_isbn ());

      return true;
    }

    if (n == "title" && ns.empty ())
    {
      if (this->title_parser_)
        this->title (this->title_parser_->post_title ());

      return true;
    }

    if (n == "genre" && ns.empty ())
    {
      if (this->genre_parser_)
        this->genre (this->genre_parser_->post_genre ());

      return true;
    }

    if (n == "author" && ns.empty ())
    {
      if (this->author_parser_)
        this->author (this->author_parser_->post_author ());

      return true;
    }

    return false;
  }

  bool book_pskel::
  _attribute_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n,
                   const ::xml_schema::ro_string& v)
  {
    if (this->::xml_schema::complex_content::_attribute_impl (ns, n, v))
      return true;

    if (n == "available" && ns.empty ())
    {
      if (this->available_parser_)
      {
        this->available_parser_->pre ();
        this->available_parser_->_pre_impl ();
        this->available_parser_->_characters (v);
        this->available_parser_->_post_impl ();
        this->available (this->available_parser_->post_boolean ());
      }

      return true;
    }

    if (n == "id" && ns.empty ())
    {
      if (this->id_parser_)
      {
        this->id_parser_->pre ();
        this->id_parser_->_pre_impl ();
        this->id_parser_->_characters (v);
        this->id_parser_->_post_impl ();
        this->id (this->id_parser_->post_id ());
      }

      return true;
    }

    return false;
  }

  // catalog_pskel
  //

  void catalog_pskel::
  book (const ::library::book&)
  {
  }

  bool catalog_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    XSD_UNUSED (t);

    if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
      return true;

    if (n == "book" && ns.empty ())
    {
      this->::xml_schema::complex_content::context_.top ().parser_ = this->book_parser_;

      if (this->book_parser_)
        this->book_parser_->pre ();

      return true;
    }

    return false;
  }

  bool catalog_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
      return true;

    if (n == "book" && ns.empty ())
    {
      if (this->book_parser_)
        this->book (this->book_parser_->post_book ());

      return true;
    }

    return false;
  }
}

// Begin epilogue.
//
//
// End epilogue.

