// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "text-pskel.hxx"

// anchor_pskel
//

void anchor_pskel::
href_parser (::xml_schema::string_pskel& p)
{
  this->href_parser_ = &p;
}

void anchor_pskel::
parsers (::xml_schema::string_pskel& href)
{
  this->href_parser_ = &href;
}

anchor_pskel::
anchor_pskel ()
: href_parser_ (0)
{
}

// text_pskel
//

void text_pskel::
a_parser (::anchor_pskel& p)
{
  this->a_parser_ = &p;
}

void text_pskel::
parsers (::anchor_pskel& a)
{
  this->a_parser_ = &a;
}

text_pskel::
text_pskel ()
: a_parser_ (0)
{
}

// anchor_pskel
//

void anchor_pskel::
href (const ::std::string&)
{
}

bool anchor_pskel::
_attribute_impl (const ::xml_schema::ro_string& ns,
                 const ::xml_schema::ro_string& n,
                 const ::xml_schema::ro_string& v)
{
  if (this->::xml_schema::string_pskel::_attribute_impl (ns, n, v))
    return true;

  if (n == "href" && ns.empty ())
  {
    if (this->href_parser_)
    {
      this->href_parser_->pre ();
      this->href_parser_->_pre_impl ();
      this->href_parser_->_characters (v);
      this->href_parser_->_post_impl ();
      this->href (this->href_parser_->post_string ());
    }

    return true;
  }

  return false;
}

// text_pskel
//

void text_pskel::
a (const ::anchor&)
{
}

void text_pskel::
post_text ()
{
}

bool text_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
    return true;

  if (n == "a" && ns.empty ())
  {
    this->::xml_schema::complex_content::context_.top ().parser_ = this->a_parser_;

    if (this->a_parser_)
      this->a_parser_->pre ();

    return true;
  }

  return false;
}

bool text_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
    return true;

  if (n == "a" && ns.empty ())
  {
    if (this->a_parser_)
      this->a (this->a_parser_->post_anchor ());

    return true;
  }

  return false;
}

// Begin epilogue.
//
//
// End epilogue.

