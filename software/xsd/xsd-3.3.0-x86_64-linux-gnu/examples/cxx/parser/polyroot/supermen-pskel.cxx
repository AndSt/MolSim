// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "supermen-pskel.hxx"

// person_pskel
//

void person_pskel::
name_parser (::xml_schema::string_pskel& p)
{
  this->name_parser_ = &p;
}

void person_pskel::
name_parser (const ::xml_schema::parser_map& m)
{
  this->name_parser_map_ = &m;
}

void person_pskel::
parsers (::xml_schema::string_pskel& name)
{
  this->name_parser_ = &name;
}

person_pskel::
person_pskel ()
: name_parser_ (0),
  name_parser_map_ (0)
{
}

// superman_pskel
//

void superman_pskel::
can_fly_parser (::xml_schema::boolean_pskel& p)
{
  this->can_fly_parser_ = &p;
}

void superman_pskel::
parsers (::xml_schema::string_pskel& name,
         ::xml_schema::boolean_pskel& can_fly)
{
  this->name_parser_ = &name;
  this->can_fly_parser_ = &can_fly;
}

superman_pskel::
superman_pskel ()
: can_fly_parser_ (0)
{
}

// batman_pskel
//

void batman_pskel::
wing_span_parser (::xml_schema::unsigned_int_pskel& p)
{
  this->wing_span_parser_ = &p;
}

void batman_pskel::
parsers (::xml_schema::string_pskel& name,
         ::xml_schema::boolean_pskel& can_fly,
         ::xml_schema::unsigned_int_pskel& wing_span)
{
  this->name_parser_ = &name;
  this->can_fly_parser_ = &can_fly;
  this->wing_span_parser_ = &wing_span;
}

batman_pskel::
batman_pskel ()
: wing_span_parser_ (0)
{
}

#include <xsd/cxx/parser/substitution-map.hxx>

static
const ::xsd::cxx::parser::substitution_map_init< char >
_xsd_substitution_map_init_;

// person_pskel
//

const char* person_pskel::
_static_type ()
{
  return "person";
}

const char* person_pskel::
_dynamic_type () const
{
  return _static_type ();
}

void person_pskel::
name (const ::std::string&)
{
}

void person_pskel::
post_person ()
{
}

bool person_pskel::
_start_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n,
                     const ::xml_schema::ro_string* t)
{
  XSD_UNUSED (t);

  if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
    return true;

  if (n == "name" && ns.empty ())
  {
    if (t == 0 && this->name_parser_ != 0)
      this->name_parser_cache_ = this->name_parser_;
    else
    {
      ::xml_schema::ro_string ts (::xml_schema::string_pskel::_static_type (), 39UL);

      if (t == 0)
        t = &ts;

      if (this->name_parser_ != 0 && *t == ts)
        this->name_parser_cache_ = this->name_parser_;
      else if (this->name_parser_map_ != 0)
        this->name_parser_cache_ = dynamic_cast< ::xml_schema::string_pskel* > (
          this->name_parser_map_->find (*t));
      else
        this->name_parser_cache_ = 0;
    }

    this->::xml_schema::complex_content::context_.top ().parser_ = this->name_parser_cache_;

    if (this->name_parser_cache_)
      this->name_parser_cache_->pre ();

    return true;
  }

  return false;
}

bool person_pskel::
_end_element_impl (const ::xml_schema::ro_string& ns,
                   const ::xml_schema::ro_string& n)
{
  if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
    return true;

  if (n == "name" && ns.empty ())
  {
    if (this->name_parser_cache_)
      this->name (this->name_parser_cache_->post_string ());

    return true;
  }

  return false;
}

// superman_pskel
//

const char* superman_pskel::
_static_type ()
{
  return "superman";
}

const char* superman_pskel::
_dynamic_type () const
{
  return _static_type ();
}

void superman_pskel::
can_fly (bool)
{
}

void superman_pskel::
post_superman ()
{
  post_person ();
}

bool superman_pskel::
_attribute_impl (const ::xml_schema::ro_string& ns,
                 const ::xml_schema::ro_string& n,
                 const ::xml_schema::ro_string& v)
{
  if (this->::person_pskel::_attribute_impl (ns, n, v))
    return true;

  if (n == "can-fly" && ns.empty ())
  {
    if (this->can_fly_parser_)
    {
      this->can_fly_parser_->pre ();
      this->can_fly_parser_->_pre_impl ();
      this->can_fly_parser_->_characters (v);
      this->can_fly_parser_->_post_impl ();
      this->can_fly (this->can_fly_parser_->post_boolean ());
    }

    return true;
  }

  return false;
}

// batman_pskel
//

const char* batman_pskel::
_static_type ()
{
  return "batman";
}

const char* batman_pskel::
_dynamic_type () const
{
  return _static_type ();
}

void batman_pskel::
wing_span (unsigned int)
{
}

void batman_pskel::
post_batman ()
{
  post_superman ();
}

bool batman_pskel::
_attribute_impl (const ::xml_schema::ro_string& ns,
                 const ::xml_schema::ro_string& n,
                 const ::xml_schema::ro_string& v)
{
  if (this->::superman_pskel::_attribute_impl (ns, n, v))
    return true;

  if (n == "wing-span" && ns.empty ())
  {
    if (this->wing_span_parser_)
    {
      this->wing_span_parser_->pre ();
      this->wing_span_parser_->_pre_impl ();
      this->wing_span_parser_->_characters (v);
      this->wing_span_parser_->_post_impl ();
      this->wing_span (this->wing_span_parser_->post_unsigned_int ());
    }

    return true;
  }

  return false;
}

// Begin epilogue.
//
//
// End epilogue.

