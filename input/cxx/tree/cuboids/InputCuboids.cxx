// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "InputCuboids.hxx"

// ori_t
// 

const ori_t::oriX_type& ori_t::
oriX () const
{
  return this->oriX_.get ();
}

ori_t::oriX_type& ori_t::
oriX ()
{
  return this->oriX_.get ();
}

void ori_t::
oriX (const oriX_type& x)
{
  this->oriX_.set (x);
}

const ori_t::oriY_type& ori_t::
oriY () const
{
  return this->oriY_.get ();
}

ori_t::oriY_type& ori_t::
oriY ()
{
  return this->oriY_.get ();
}

void ori_t::
oriY (const oriY_type& x)
{
  this->oriY_.set (x);
}

const ori_t::oriZ_type& ori_t::
oriZ () const
{
  return this->oriZ_.get ();
}

ori_t::oriZ_type& ori_t::
oriZ ()
{
  return this->oriZ_.get ();
}

void ori_t::
oriZ (const oriZ_type& x)
{
  this->oriZ_.set (x);
}


// startV_t
// 

const startV_t::velX_type& startV_t::
velX () const
{
  return this->velX_.get ();
}

startV_t::velX_type& startV_t::
velX ()
{
  return this->velX_.get ();
}

void startV_t::
velX (const velX_type& x)
{
  this->velX_.set (x);
}

const startV_t::velY_type& startV_t::
velY () const
{
  return this->velY_.get ();
}

startV_t::velY_type& startV_t::
velY ()
{
  return this->velY_.get ();
}

void startV_t::
velY (const velY_type& x)
{
  this->velY_.set (x);
}

const startV_t::velZ_type& startV_t::
velZ () const
{
  return this->velZ_.get ();
}

startV_t::velZ_type& startV_t::
velZ ()
{
  return this->velZ_.get ();
}

void startV_t::
velZ (const velZ_type& x)
{
  this->velZ_.set (x);
}


// size3D_t
// 

const size3D_t::width_type& size3D_t::
width () const
{
  return this->width_.get ();
}

size3D_t::width_type& size3D_t::
width ()
{
  return this->width_.get ();
}

void size3D_t::
width (const width_type& x)
{
  this->width_.set (x);
}

const size3D_t::height_type& size3D_t::
height () const
{
  return this->height_.get ();
}

size3D_t::height_type& size3D_t::
height ()
{
  return this->height_.get ();
}

void size3D_t::
height (const height_type& x)
{
  this->height_.set (x);
}

const size3D_t::depth_type& size3D_t::
depth () const
{
  return this->depth_.get ();
}

size3D_t::depth_type& size3D_t::
depth ()
{
  return this->depth_.get ();
}

void size3D_t::
depth (const depth_type& x)
{
  this->depth_.set (x);
}


// cuboid_t
// 

const cuboid_t::meshWidth_type& cuboid_t::
meshWidth () const
{
  return this->meshWidth_.get ();
}

cuboid_t::meshWidth_type& cuboid_t::
meshWidth ()
{
  return this->meshWidth_.get ();
}

void cuboid_t::
meshWidth (const meshWidth_type& x)
{
  this->meshWidth_.set (x);
}

const cuboid_t::mass_type& cuboid_t::
mass () const
{
  return this->mass_.get ();
}

cuboid_t::mass_type& cuboid_t::
mass ()
{
  return this->mass_.get ();
}

void cuboid_t::
mass (const mass_type& x)
{
  this->mass_.set (x);
}

const cuboid_t::meanV_type& cuboid_t::
meanV () const
{
  return this->meanV_.get ();
}

cuboid_t::meanV_type& cuboid_t::
meanV ()
{
  return this->meanV_.get ();
}

void cuboid_t::
meanV (const meanV_type& x)
{
  this->meanV_.set (x);
}

const cuboid_t::parTypeC_type& cuboid_t::
parTypeC () const
{
  return this->parTypeC_.get ();
}

cuboid_t::parTypeC_type& cuboid_t::
parTypeC ()
{
  return this->parTypeC_.get ();
}

void cuboid_t::
parTypeC (const parTypeC_type& x)
{
  this->parTypeC_.set (x);
}

const cuboid_t::epsilon_type& cuboid_t::
epsilon () const
{
  return this->epsilon_.get ();
}

cuboid_t::epsilon_type& cuboid_t::
epsilon ()
{
  return this->epsilon_.get ();
}

void cuboid_t::
epsilon (const epsilon_type& x)
{
  this->epsilon_.set (x);
}

const cuboid_t::sigma_type& cuboid_t::
sigma () const
{
  return this->sigma_.get ();
}

cuboid_t::sigma_type& cuboid_t::
sigma ()
{
  return this->sigma_.get ();
}

void cuboid_t::
sigma (const sigma_type& x)
{
  this->sigma_.set (x);
}

const cuboid_t::originVector_type& cuboid_t::
originVector () const
{
  return this->originVector_.get ();
}

cuboid_t::originVector_type& cuboid_t::
originVector ()
{
  return this->originVector_.get ();
}

void cuboid_t::
originVector (const originVector_type& x)
{
  this->originVector_.set (x);
}

void cuboid_t::
originVector (::std::auto_ptr< originVector_type > x)
{
  this->originVector_.set (x);
}

const cuboid_t::startVelocity_type& cuboid_t::
startVelocity () const
{
  return this->startVelocity_.get ();
}

cuboid_t::startVelocity_type& cuboid_t::
startVelocity ()
{
  return this->startVelocity_.get ();
}

void cuboid_t::
startVelocity (const startVelocity_type& x)
{
  this->startVelocity_.set (x);
}

void cuboid_t::
startVelocity (::std::auto_ptr< startVelocity_type > x)
{
  this->startVelocity_.set (x);
}

const cuboid_t::size3D_type& cuboid_t::
size3D () const
{
  return this->size3D_.get ();
}

cuboid_t::size3D_type& cuboid_t::
size3D ()
{
  return this->size3D_.get ();
}

void cuboid_t::
size3D (const size3D_type& x)
{
  this->size3D_.set (x);
}

void cuboid_t::
size3D (::std::auto_ptr< size3D_type > x)
{
  this->size3D_.set (x);
}


// cuboids_t
// 

const cuboids_t::cuboid_sequence& cuboids_t::
cuboid () const
{
  return this->cuboid_;
}

cuboids_t::cuboid_sequence& cuboids_t::
cuboid ()
{
  return this->cuboid_;
}

void cuboids_t::
cuboid (const cuboid_sequence& s)
{
  this->cuboid_ = s;
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// ori_t
//

ori_t::
ori_t (const oriX_type& oriX,
       const oriY_type& oriY,
       const oriZ_type& oriZ)
: ::xml_schema::type (),
  oriX_ (oriX, ::xml_schema::flags (), this),
  oriY_ (oriY, ::xml_schema::flags (), this),
  oriZ_ (oriZ, ::xml_schema::flags (), this)
{
}

ori_t::
ori_t (const ori_t& x,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  oriX_ (x.oriX_, f, this),
  oriY_ (x.oriY_, f, this),
  oriZ_ (x.oriZ_, f, this)
{
}

ori_t::
ori_t (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  oriX_ (f, this),
  oriY_ (f, this),
  oriZ_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void ori_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // oriX
    //
    if (n.name () == "oriX" && n.namespace_ ().empty ())
    {
      if (!oriX_.present ())
      {
        this->oriX_.set (oriX_traits::create (i, f, this));
        continue;
      }
    }

    // oriY
    //
    if (n.name () == "oriY" && n.namespace_ ().empty ())
    {
      if (!oriY_.present ())
      {
        this->oriY_.set (oriY_traits::create (i, f, this));
        continue;
      }
    }

    // oriZ
    //
    if (n.name () == "oriZ" && n.namespace_ ().empty ())
    {
      if (!oriZ_.present ())
      {
        this->oriZ_.set (oriZ_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!oriX_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "oriX",
      "");
  }

  if (!oriY_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "oriY",
      "");
  }

  if (!oriZ_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "oriZ",
      "");
  }
}

ori_t* ori_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class ori_t (*this, f, c);
}

ori_t::
~ori_t ()
{
}

// startV_t
//

startV_t::
startV_t (const velX_type& velX,
          const velY_type& velY,
          const velZ_type& velZ)
: ::xml_schema::type (),
  velX_ (velX, ::xml_schema::flags (), this),
  velY_ (velY, ::xml_schema::flags (), this),
  velZ_ (velZ, ::xml_schema::flags (), this)
{
}

startV_t::
startV_t (const startV_t& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  velX_ (x.velX_, f, this),
  velY_ (x.velY_, f, this),
  velZ_ (x.velZ_, f, this)
{
}

startV_t::
startV_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  velX_ (f, this),
  velY_ (f, this),
  velZ_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void startV_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // velX
    //
    if (n.name () == "velX" && n.namespace_ ().empty ())
    {
      if (!velX_.present ())
      {
        this->velX_.set (velX_traits::create (i, f, this));
        continue;
      }
    }

    // velY
    //
    if (n.name () == "velY" && n.namespace_ ().empty ())
    {
      if (!velY_.present ())
      {
        this->velY_.set (velY_traits::create (i, f, this));
        continue;
      }
    }

    // velZ
    //
    if (n.name () == "velZ" && n.namespace_ ().empty ())
    {
      if (!velZ_.present ())
      {
        this->velZ_.set (velZ_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!velX_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "velX",
      "");
  }

  if (!velY_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "velY",
      "");
  }

  if (!velZ_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "velZ",
      "");
  }
}

startV_t* startV_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class startV_t (*this, f, c);
}

startV_t::
~startV_t ()
{
}

// size3D_t
//

size3D_t::
size3D_t (const width_type& width,
          const height_type& height,
          const depth_type& depth)
: ::xml_schema::type (),
  width_ (width, ::xml_schema::flags (), this),
  height_ (height, ::xml_schema::flags (), this),
  depth_ (depth, ::xml_schema::flags (), this)
{
}

size3D_t::
size3D_t (const size3D_t& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  width_ (x.width_, f, this),
  height_ (x.height_, f, this),
  depth_ (x.depth_, f, this)
{
}

size3D_t::
size3D_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  width_ (f, this),
  height_ (f, this),
  depth_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void size3D_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // width
    //
    if (n.name () == "width" && n.namespace_ ().empty ())
    {
      if (!width_.present ())
      {
        this->width_.set (width_traits::create (i, f, this));
        continue;
      }
    }

    // height
    //
    if (n.name () == "height" && n.namespace_ ().empty ())
    {
      if (!height_.present ())
      {
        this->height_.set (height_traits::create (i, f, this));
        continue;
      }
    }

    // depth
    //
    if (n.name () == "depth" && n.namespace_ ().empty ())
    {
      if (!depth_.present ())
      {
        this->depth_.set (depth_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!width_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "width",
      "");
  }

  if (!height_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "height",
      "");
  }

  if (!depth_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "depth",
      "");
  }
}

size3D_t* size3D_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class size3D_t (*this, f, c);
}

size3D_t::
~size3D_t ()
{
}

// cuboid_t
//

cuboid_t::
cuboid_t (const meshWidth_type& meshWidth,
          const mass_type& mass,
          const meanV_type& meanV,
          const parTypeC_type& parTypeC,
          const epsilon_type& epsilon,
          const sigma_type& sigma,
          const originVector_type& originVector,
          const startVelocity_type& startVelocity,
          const size3D_type& size3D)
: ::xml_schema::type (),
  meshWidth_ (meshWidth, ::xml_schema::flags (), this),
  mass_ (mass, ::xml_schema::flags (), this),
  meanV_ (meanV, ::xml_schema::flags (), this),
  parTypeC_ (parTypeC, ::xml_schema::flags (), this),
  epsilon_ (epsilon, ::xml_schema::flags (), this),
  sigma_ (sigma, ::xml_schema::flags (), this),
  originVector_ (originVector, ::xml_schema::flags (), this),
  startVelocity_ (startVelocity, ::xml_schema::flags (), this),
  size3D_ (size3D, ::xml_schema::flags (), this)
{
}

cuboid_t::
cuboid_t (const meshWidth_type& meshWidth,
          const mass_type& mass,
          const meanV_type& meanV,
          const parTypeC_type& parTypeC,
          const epsilon_type& epsilon,
          const sigma_type& sigma,
          ::std::auto_ptr< originVector_type >& originVector,
          ::std::auto_ptr< startVelocity_type >& startVelocity,
          ::std::auto_ptr< size3D_type >& size3D)
: ::xml_schema::type (),
  meshWidth_ (meshWidth, ::xml_schema::flags (), this),
  mass_ (mass, ::xml_schema::flags (), this),
  meanV_ (meanV, ::xml_schema::flags (), this),
  parTypeC_ (parTypeC, ::xml_schema::flags (), this),
  epsilon_ (epsilon, ::xml_schema::flags (), this),
  sigma_ (sigma, ::xml_schema::flags (), this),
  originVector_ (originVector, ::xml_schema::flags (), this),
  startVelocity_ (startVelocity, ::xml_schema::flags (), this),
  size3D_ (size3D, ::xml_schema::flags (), this)
{
}

cuboid_t::
cuboid_t (const cuboid_t& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  meshWidth_ (x.meshWidth_, f, this),
  mass_ (x.mass_, f, this),
  meanV_ (x.meanV_, f, this),
  parTypeC_ (x.parTypeC_, f, this),
  epsilon_ (x.epsilon_, f, this),
  sigma_ (x.sigma_, f, this),
  originVector_ (x.originVector_, f, this),
  startVelocity_ (x.startVelocity_, f, this),
  size3D_ (x.size3D_, f, this)
{
}

cuboid_t::
cuboid_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  meshWidth_ (f, this),
  mass_ (f, this),
  meanV_ (f, this),
  parTypeC_ (f, this),
  epsilon_ (f, this),
  sigma_ (f, this),
  originVector_ (f, this),
  startVelocity_ (f, this),
  size3D_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void cuboid_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // meshWidth
    //
    if (n.name () == "meshWidth" && n.namespace_ ().empty ())
    {
      if (!meshWidth_.present ())
      {
        this->meshWidth_.set (meshWidth_traits::create (i, f, this));
        continue;
      }
    }

    // mass
    //
    if (n.name () == "mass" && n.namespace_ ().empty ())
    {
      if (!mass_.present ())
      {
        this->mass_.set (mass_traits::create (i, f, this));
        continue;
      }
    }

    // meanV
    //
    if (n.name () == "meanV" && n.namespace_ ().empty ())
    {
      if (!meanV_.present ())
      {
        this->meanV_.set (meanV_traits::create (i, f, this));
        continue;
      }
    }

    // parTypeC
    //
    if (n.name () == "parTypeC" && n.namespace_ ().empty ())
    {
      if (!parTypeC_.present ())
      {
        this->parTypeC_.set (parTypeC_traits::create (i, f, this));
        continue;
      }
    }

    // epsilon
    //
    if (n.name () == "epsilon" && n.namespace_ ().empty ())
    {
      if (!epsilon_.present ())
      {
        this->epsilon_.set (epsilon_traits::create (i, f, this));
        continue;
      }
    }

    // sigma
    //
    if (n.name () == "sigma" && n.namespace_ ().empty ())
    {
      if (!sigma_.present ())
      {
        this->sigma_.set (sigma_traits::create (i, f, this));
        continue;
      }
    }

    // originVector
    //
    if (n.name () == "originVector" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< originVector_type > r (
        originVector_traits::create (i, f, this));

      if (!originVector_.present ())
      {
        this->originVector_.set (r);
        continue;
      }
    }

    // startVelocity
    //
    if (n.name () == "startVelocity" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< startVelocity_type > r (
        startVelocity_traits::create (i, f, this));

      if (!startVelocity_.present ())
      {
        this->startVelocity_.set (r);
        continue;
      }
    }

    // size3D
    //
    if (n.name () == "size3D" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< size3D_type > r (
        size3D_traits::create (i, f, this));

      if (!size3D_.present ())
      {
        this->size3D_.set (r);
        continue;
      }
    }

    break;
  }

  if (!meshWidth_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "meshWidth",
      "");
  }

  if (!mass_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "mass",
      "");
  }

  if (!meanV_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "meanV",
      "");
  }

  if (!parTypeC_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "parTypeC",
      "");
  }

  if (!epsilon_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "epsilon",
      "");
  }

  if (!sigma_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "sigma",
      "");
  }

  if (!originVector_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "originVector",
      "");
  }

  if (!startVelocity_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "startVelocity",
      "");
  }

  if (!size3D_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "size3D",
      "");
  }
}

cuboid_t* cuboid_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class cuboid_t (*this, f, c);
}

cuboid_t::
~cuboid_t ()
{
}

// cuboids_t
//

cuboids_t::
cuboids_t ()
: ::xml_schema::type (),
  cuboid_ (::xml_schema::flags (), this)
{
}

cuboids_t::
cuboids_t (const cuboids_t& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  cuboid_ (x.cuboid_, f, this)
{
}

cuboids_t::
cuboids_t (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  cuboid_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void cuboids_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // cuboid
    //
    if (n.name () == "cuboid" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< cuboid_type > r (
        cuboid_traits::create (i, f, this));

      this->cuboid_.push_back (r);
      continue;
    }

    break;
  }
}

cuboids_t* cuboids_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class cuboids_t (*this, f, c);
}

cuboids_t::
~cuboids_t ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::cuboids_t >
cuboids (const ::std::string& u,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::cuboids_t > r (
    ::cuboids (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::cuboids_t >
cuboids (const ::std::string& u,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::cuboids_t > r (
    ::cuboids (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::cuboids_t >
cuboids (const ::std::string& u,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::cuboids_t > r (
    ::cuboids (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::cuboids_t >
cuboids (::std::istream& is,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::cuboids (isrc, f, p);
}

::std::auto_ptr< ::cuboids_t >
cuboids (::std::istream& is,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::cuboids (isrc, h, f, p);
}

::std::auto_ptr< ::cuboids_t >
cuboids (::std::istream& is,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::cuboids (isrc, h, f, p);
}

::std::auto_ptr< ::cuboids_t >
cuboids (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::cuboids (isrc, f, p);
}

::std::auto_ptr< ::cuboids_t >
cuboids (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::cuboids (isrc, h, f, p);
}

::std::auto_ptr< ::cuboids_t >
cuboids (::std::istream& is,
         const ::std::string& sid,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::cuboids (isrc, h, f, p);
}

::std::auto_ptr< ::cuboids_t >
cuboids (::xercesc::InputSource& i,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::cuboids_t > r (
    ::cuboids (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::cuboids_t >
cuboids (::xercesc::InputSource& i,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::cuboids_t > r (
    ::cuboids (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::cuboids_t >
cuboids (::xercesc::InputSource& i,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::cuboids_t > r (
    ::cuboids (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::cuboids_t >
cuboids (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

    ::std::auto_ptr< ::cuboids_t > r (
      ::cuboids (
        c, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  const ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "cuboids" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::cuboids_t > r (
      ::xsd::cxx::tree::traits< ::cuboids_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "cuboids",
    "");
}

::std::auto_ptr< ::cuboids_t >
cuboids (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
         ::xml_schema::flags f,
         const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "cuboids" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::cuboids_t > r (
      ::xsd::cxx::tree::traits< ::cuboids_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "cuboids",
    "");
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

