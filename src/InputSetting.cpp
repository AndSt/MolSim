// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "InputSetting.h"

// ljf_t
// 

const ljf_t::epsilon_type& ljf_t::
epsilon () const
{
  return this->epsilon_.get ();
}

ljf_t::epsilon_type& ljf_t::
epsilon ()
{
  return this->epsilon_.get ();
}

void ljf_t::
epsilon (const epsilon_type& x)
{
  this->epsilon_.set (x);
}

const ljf_t::sigma_type& ljf_t::
sigma () const
{
  return this->sigma_.get ();
}

ljf_t::sigma_type& ljf_t::
sigma ()
{
  return this->sigma_.get ();
}

void ljf_t::
sigma (const sigma_type& x)
{
  this->sigma_.set (x);
}


// inputfile_t
// 

const inputfile_t::name_type& inputfile_t::
name () const
{
  return this->name_.get ();
}

inputfile_t::name_type& inputfile_t::
name ()
{
  return this->name_.get ();
}

void inputfile_t::
name (const name_type& x)
{
  this->name_.set (x);
}

void inputfile_t::
name (::std::auto_ptr< name_type > x)
{
  this->name_.set (x);
}

const inputfile_t::type_type& inputfile_t::
type () const
{
  return this->type_.get ();
}

inputfile_t::type_type& inputfile_t::
type ()
{
  return this->type_.get ();
}

void inputfile_t::
type (const type_type& x)
{
  this->type_.set (x);
}

void inputfile_t::
type (::std::auto_ptr< type_type > x)
{
  this->type_.set (x);
}


// type_t
// 

type_t::
type_t (value v)
: ::xml_schema::string (_xsd_type_t_literals_[v])
{
}

type_t::
type_t (const char* v)
: ::xml_schema::string (v)
{
}

type_t::
type_t (const ::std::string& v)
: ::xml_schema::string (v)
{
}

type_t::
type_t (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

type_t::
type_t (const type_t& v,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

type_t& type_t::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_type_t_literals_[v]);

  return *this;
}


// outputfile_t
// 

const outputfile_t::name_type& outputfile_t::
name () const
{
  return this->name_.get ();
}

outputfile_t::name_type& outputfile_t::
name ()
{
  return this->name_.get ();
}

void outputfile_t::
name (const name_type& x)
{
  this->name_.set (x);
}

void outputfile_t::
name (::std::auto_ptr< name_type > x)
{
  this->name_.set (x);
}

const outputfile_t::freq_type& outputfile_t::
freq () const
{
  return this->freq_.get ();
}

outputfile_t::freq_type& outputfile_t::
freq ()
{
  return this->freq_.get ();
}

void outputfile_t::
freq (const freq_type& x)
{
  this->freq_.set (x);
}


// pse_t
// 

const pse_t::start_time_type& pse_t::
start_time () const
{
  return this->start_time_.get ();
}

pse_t::start_time_type& pse_t::
start_time ()
{
  return this->start_time_.get ();
}

void pse_t::
start_time (const start_time_type& x)
{
  this->start_time_.set (x);
}

const pse_t::t_end_type& pse_t::
t_end () const
{
  return this->t_end_.get ();
}

pse_t::t_end_type& pse_t::
t_end ()
{
  return this->t_end_.get ();
}

void pse_t::
t_end (const t_end_type& x)
{
  this->t_end_.set (x);
}

const pse_t::delta_t_type& pse_t::
delta_t () const
{
  return this->delta_t_.get ();
}

pse_t::delta_t_type& pse_t::
delta_t ()
{
  return this->delta_t_.get ();
}

void pse_t::
delta_t (const delta_t_type& x)
{
  this->delta_t_.set (x);
}

const pse_t::ljf_type& pse_t::
ljf () const
{
  return this->ljf_.get ();
}

pse_t::ljf_type& pse_t::
ljf ()
{
  return this->ljf_.get ();
}

void pse_t::
ljf (const ljf_type& x)
{
  this->ljf_.set (x);
}

void pse_t::
ljf (::std::auto_ptr< ljf_type > x)
{
  this->ljf_.set (x);
}

const pse_t::inputfile_type& pse_t::
inputfile () const
{
  return this->inputfile_.get ();
}

pse_t::inputfile_type& pse_t::
inputfile ()
{
  return this->inputfile_.get ();
}

void pse_t::
inputfile (const inputfile_type& x)
{
  this->inputfile_.set (x);
}

void pse_t::
inputfile (::std::auto_ptr< inputfile_type > x)
{
  this->inputfile_.set (x);
}

const pse_t::outputfile_type& pse_t::
outputfile () const
{
  return this->outputfile_.get ();
}

pse_t::outputfile_type& pse_t::
outputfile ()
{
  return this->outputfile_.get ();
}

void pse_t::
outputfile (const outputfile_type& x)
{
  this->outputfile_.set (x);
}

void pse_t::
outputfile (::std::auto_ptr< outputfile_type > x)
{
  this->outputfile_.set (x);
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// ljf_t
//

ljf_t::
ljf_t (const epsilon_type& epsilon,
       const sigma_type& sigma)
: ::xml_schema::type (),
  epsilon_ (epsilon, ::xml_schema::flags (), this),
  sigma_ (sigma, ::xml_schema::flags (), this)
{
}

ljf_t::
ljf_t (const ljf_t& x,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  epsilon_ (x.epsilon_, f, this),
  sigma_ (x.sigma_, f, this)
{
}

ljf_t::
ljf_t (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  epsilon_ (f, this),
  sigma_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void ljf_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // epsilon
    //
    if (n.name () == "epsilon" && n.namespace_ ().empty ())
    {
      if (!epsilon_.present ())
      {
        this->epsilon_.set (epsilon_traits::create (i, f, this));
        continue;
      }
    }

    // sigma
    //
    if (n.name () == "sigma" && n.namespace_ ().empty ())
    {
      if (!sigma_.present ())
      {
        this->sigma_.set (sigma_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!epsilon_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "epsilon",
      "");
  }

  if (!sigma_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "sigma",
      "");
  }
}

ljf_t* ljf_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class ljf_t (*this, f, c);
}

ljf_t::
~ljf_t ()
{
}

// inputfile_t
//

inputfile_t::
inputfile_t (const name_type& name,
             const type_type& type)
: ::xml_schema::type (),
  name_ (name, ::xml_schema::flags (), this),
  type_ (type, ::xml_schema::flags (), this)
{
}

inputfile_t::
inputfile_t (const inputfile_t& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  name_ (x.name_, f, this),
  type_ (x.type_, f, this)
{
}

inputfile_t::
inputfile_t (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  name_ (f, this),
  type_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void inputfile_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // name
    //
    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< name_type > r (
        name_traits::create (i, f, this));

      if (!name_.present ())
      {
        this->name_.set (r);
        continue;
      }
    }

    // type
    //
    if (n.name () == "type" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< type_type > r (
        type_traits::create (i, f, this));

      if (!type_.present ())
      {
        this->type_.set (r);
        continue;
      }
    }

    break;
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "name",
      "");
  }

  if (!type_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "type",
      "");
  }
}

inputfile_t* inputfile_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class inputfile_t (*this, f, c);
}

inputfile_t::
~inputfile_t ()
{
}

// type_t
//

type_t::
type_t (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_type_t_convert ();
}

type_t::
type_t (const ::xercesc::DOMAttr& a,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_type_t_convert ();
}

type_t::
type_t (const ::std::string& s,
        const ::xercesc::DOMElement* e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_type_t_convert ();
}

type_t* type_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class type_t (*this, f, c);
}

type_t::value type_t::
_xsd_type_t_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_type_t_literals_);
  const value* i (::std::lower_bound (
                    _xsd_type_t_indexes_,
                    _xsd_type_t_indexes_ + 3,
                    *this,
                    c));

  if (i == _xsd_type_t_indexes_ + 3 || _xsd_type_t_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const type_t::
_xsd_type_t_literals_[3] =
{
  "cuboids",
  "particles",
  "spheres"
};

const type_t::value type_t::
_xsd_type_t_indexes_[3] =
{
  ::type_t::cuboids,
  ::type_t::particles,
  ::type_t::spheres
};

// outputfile_t
//

outputfile_t::
outputfile_t (const name_type& name,
              const freq_type& freq)
: ::xml_schema::type (),
  name_ (name, ::xml_schema::flags (), this),
  freq_ (freq, ::xml_schema::flags (), this)
{
}

outputfile_t::
outputfile_t (const outputfile_t& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  name_ (x.name_, f, this),
  freq_ (x.freq_, f, this)
{
}

outputfile_t::
outputfile_t (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  name_ (f, this),
  freq_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void outputfile_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // name
    //
    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< name_type > r (
        name_traits::create (i, f, this));

      if (!name_.present ())
      {
        this->name_.set (r);
        continue;
      }
    }

    // freq
    //
    if (n.name () == "freq" && n.namespace_ ().empty ())
    {
      if (!freq_.present ())
      {
        this->freq_.set (freq_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "name",
      "");
  }

  if (!freq_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "freq",
      "");
  }
}

outputfile_t* outputfile_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class outputfile_t (*this, f, c);
}

outputfile_t::
~outputfile_t ()
{
}

// pse_t
//

pse_t::
pse_t (const start_time_type& start_time,
       const t_end_type& t_end,
       const delta_t_type& delta_t,
       const ljf_type& ljf,
       const inputfile_type& inputfile,
       const outputfile_type& outputfile)
: ::xml_schema::type (),
  start_time_ (start_time, ::xml_schema::flags (), this),
  t_end_ (t_end, ::xml_schema::flags (), this),
  delta_t_ (delta_t, ::xml_schema::flags (), this),
  ljf_ (ljf, ::xml_schema::flags (), this),
  inputfile_ (inputfile, ::xml_schema::flags (), this),
  outputfile_ (outputfile, ::xml_schema::flags (), this)
{
}

pse_t::
pse_t (const start_time_type& start_time,
       const t_end_type& t_end,
       const delta_t_type& delta_t,
       ::std::auto_ptr< ljf_type >& ljf,
       ::std::auto_ptr< inputfile_type >& inputfile,
       ::std::auto_ptr< outputfile_type >& outputfile)
: ::xml_schema::type (),
  start_time_ (start_time, ::xml_schema::flags (), this),
  t_end_ (t_end, ::xml_schema::flags (), this),
  delta_t_ (delta_t, ::xml_schema::flags (), this),
  ljf_ (ljf, ::xml_schema::flags (), this),
  inputfile_ (inputfile, ::xml_schema::flags (), this),
  outputfile_ (outputfile, ::xml_schema::flags (), this)
{
}

pse_t::
pse_t (const pse_t& x,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  start_time_ (x.start_time_, f, this),
  t_end_ (x.t_end_, f, this),
  delta_t_ (x.delta_t_, f, this),
  ljf_ (x.ljf_, f, this),
  inputfile_ (x.inputfile_, f, this),
  outputfile_ (x.outputfile_, f, this)
{
}

pse_t::
pse_t (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  start_time_ (f, this),
  t_end_ (f, this),
  delta_t_ (f, this),
  ljf_ (f, this),
  inputfile_ (f, this),
  outputfile_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void pse_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // start_time
    //
    if (n.name () == "start_time" && n.namespace_ ().empty ())
    {
      if (!start_time_.present ())
      {
        this->start_time_.set (start_time_traits::create (i, f, this));
        continue;
      }
    }

    // t_end
    //
    if (n.name () == "t_end" && n.namespace_ ().empty ())
    {
      if (!t_end_.present ())
      {
        this->t_end_.set (t_end_traits::create (i, f, this));
        continue;
      }
    }

    // delta_t
    //
    if (n.name () == "delta_t" && n.namespace_ ().empty ())
    {
      if (!delta_t_.present ())
      {
        this->delta_t_.set (delta_t_traits::create (i, f, this));
        continue;
      }
    }

    // ljf
    //
    if (n.name () == "ljf" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< ljf_type > r (
        ljf_traits::create (i, f, this));

      if (!ljf_.present ())
      {
        this->ljf_.set (r);
        continue;
      }
    }

    // inputfile
    //
    if (n.name () == "inputfile" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< inputfile_type > r (
        inputfile_traits::create (i, f, this));

      if (!inputfile_.present ())
      {
        this->inputfile_.set (r);
        continue;
      }
    }

    // outputfile
    //
    if (n.name () == "outputfile" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< outputfile_type > r (
        outputfile_traits::create (i, f, this));

      if (!outputfile_.present ())
      {
        this->outputfile_.set (r);
        continue;
      }
    }

    break;
  }

  if (!start_time_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "start_time",
      "");
  }

  if (!t_end_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "t_end",
      "");
  }

  if (!delta_t_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "delta_t",
      "");
  }

  if (!ljf_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "ljf",
      "");
  }

  if (!inputfile_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "inputfile",
      "");
  }

  if (!outputfile_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "outputfile",
      "");
  }
}

pse_t* pse_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class pse_t (*this, f, c);
}

pse_t::
~pse_t ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::pse_t >
pse (const ::std::string& u,
     ::xml_schema::flags f,
     const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::pse_t > r (
    ::pse (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::pse_t >
pse (const ::std::string& u,
     ::xml_schema::error_handler& h,
     ::xml_schema::flags f,
     const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::pse_t > r (
    ::pse (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::pse_t >
pse (const ::std::string& u,
     ::xercesc::DOMErrorHandler& h,
     ::xml_schema::flags f,
     const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::pse_t > r (
    ::pse (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::pse_t >
pse (::std::istream& is,
     ::xml_schema::flags f,
     const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::pse (isrc, f, p);
}

::std::auto_ptr< ::pse_t >
pse (::std::istream& is,
     ::xml_schema::error_handler& h,
     ::xml_schema::flags f,
     const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::pse (isrc, h, f, p);
}

::std::auto_ptr< ::pse_t >
pse (::std::istream& is,
     ::xercesc::DOMErrorHandler& h,
     ::xml_schema::flags f,
     const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::pse (isrc, h, f, p);
}

::std::auto_ptr< ::pse_t >
pse (::std::istream& is,
     const ::std::string& sid,
     ::xml_schema::flags f,
     const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::pse (isrc, f, p);
}

::std::auto_ptr< ::pse_t >
pse (::std::istream& is,
     const ::std::string& sid,
     ::xml_schema::error_handler& h,
     ::xml_schema::flags f,
     const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::pse (isrc, h, f, p);
}

::std::auto_ptr< ::pse_t >
pse (::std::istream& is,
     const ::std::string& sid,
     ::xercesc::DOMErrorHandler& h,
     ::xml_schema::flags f,
     const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::pse (isrc, h, f, p);
}

::std::auto_ptr< ::pse_t >
pse (::xercesc::InputSource& i,
     ::xml_schema::flags f,
     const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::pse_t > r (
    ::pse (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::pse_t >
pse (::xercesc::InputSource& i,
     ::xml_schema::error_handler& h,
     ::xml_schema::flags f,
     const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::pse_t > r (
    ::pse (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::pse_t >
pse (::xercesc::InputSource& i,
     ::xercesc::DOMErrorHandler& h,
     ::xml_schema::flags f,
     const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::pse_t > r (
    ::pse (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::pse_t >
pse (const ::xercesc::DOMDocument& d,
     ::xml_schema::flags f,
     const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

    ::std::auto_ptr< ::pse_t > r (
      ::pse (
        c, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  const ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "pse" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::pse_t > r (
      ::xsd::cxx::tree::traits< ::pse_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "pse",
    "");
}

::std::auto_ptr< ::pse_t >
pse (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
     ::xml_schema::flags f,
     const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "pse" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::pse_t > r (
      ::xsd::cxx::tree::traits< ::pse_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "pse",
    "");
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

