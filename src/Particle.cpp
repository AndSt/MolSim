/*
 * Particle.cpp
 *
 *  Created on: 23.02.2010
 *      Author: eckhardw
 */

#include "Particle.h"

#include <sstream>
#include <iostream>
#include <log4cxx/logger.h>
#include <log4cxx/propertyconfigurator.h>
#include <log4cxx/xml/domconfigurator.h>

log4cxx::LoggerPtr particlelogger(log4cxx::Logger::getLogger("particle"));

Particle::Particle(int type_arg) {
	type = type_arg;
	LOG4CXX_INFO(particlelogger,"Arrived @ Type Constructor.");
	f = 0.0;
	old_f = 0.0;
	m = 1.0;
	parID = 0;
	directNeighbors.clear();
	diagNeighbors.clear();
}

Particle::Particle(const Particle& other) {
	x = other.x;
	v = other.v;
	f = other.f;
	old_f = other.old_f;
	temp_f = 0.0;
	m = other.m;
	type = other.type;
	this->parID = other.parID;
	this->directNeighbors = other.directNeighbors;
	this->diagNeighbors = other.diagNeighbors;
	LOG4CXX_TRACE(particlelogger,"Particle generated by copy!");
}

// Todo: maybe use initializater list instead of copy?
Particle::Particle(	utils::Vector<double, 3> x_arg,
	        utils::Vector<double, 3> v_arg,
	        double m_arg,
	        int type_arg,
	        int id
){
    x = x_arg;
    v = v_arg;
    m = m_arg;
    type = type_arg;
    f = 0.0;
    old_f = 0.0;
    parID = id;
    directNeighbors.clear();
    diagNeighbors.clear();
    LOG4CXX_TRACE(particlelogger,"Particle generated!");
}

Particle::~Particle() {
	LOG4CXX_TRACE(particlelogger,"Particle destructed!");
}

utils::Vector<double, 3>& Particle::getX() {
	return x;
}

utils::Vector<double, 3>& Particle::getV() {
	return v;
}

utils::Vector<double, 3>& Particle::getF() {
	return f;
}

utils::Vector<double, 3>& Particle::getOldF() {
	return old_f;
}

double& Particle::getM() {
	return m;
}

utils::Vector<double, 3> Particle::getTempF(){
	return temp_f;
}

void Particle::updateTempF(utils::Vector<double, 3> newF) {
	temp_f = temp_f + newF;
}

int& Particle::getType() {
	return type;
}

void Particle::setF(utils::Vector<double, 3> newF){
	old_f = f;
	f = newF;
}

void Particle::deleteTempF(){
	temp_f = 0.0;
}

std::string Particle::toString() {
	std::stringstream stream;
	stream << "Particle: X:" << x <<  " v: " << v << " f: " << f << " old_f: " << old_f << " type: " << type;
	return stream.str();
}

bool Particle::operator ==(Particle& other) {
	// not membrane
	if (parID == -2 && other.parID == -2)
			return (x == other.x) && (v == other.v)
			&& (f == other.f)
			&& (type == other.type) & (m == other.m)
			&& (old_f == other.old_f);

	//membrane
	return parID == other.parID;
/*
		if (directNeighbors.empty() && diagNeighbors.empty()
				&& other.directNeighbors.empty() && other.diagNeighbors.empty())
			return true;

		if (parID != other.parID)
			return false;

		std::list<int> nr, other_nr;
		//direct
		for (std::list<Particle>::iterator it = directNeighbors.begin();
				it != directNeighbors.end(); it++){
			nr.push_back((*it).getID());
		}
		nr.sort();

		for (std::list<Particle>::iterator it = other.directNeighbors.begin();
				it != other.directNeighbors.end(); it++){
			other_nr.push_back((*it).getID());
		}
		other_nr.sort();

		if (nr.size() != other_nr.size())
			return false;

		std::list<int>::iterator j = other_nr.begin();
		for (std::list<int>::iterator it = nr.begin(); it != nr.end(); it++){
			if (*it != *j)
				return false;
			j++;
		}

		//diag
		nr.clear();
		other_nr.clear();
		for (std::list<Particle>::iterator it = diagNeighbors.begin();
				it != diagNeighbors.end(); it++){
			nr.push_back((*it).getID());
		}
		nr.sort();

		for (std::list<Particle>::iterator it = other.diagNeighbors.begin();
				it != other.diagNeighbors.end(); it++){
			other_nr.push_back((*it).getID());
		}
		other_nr.sort();

		if (nr.size() != other_nr.size())
			return false;

		j = other_nr.begin();
		for (std::list<int>::iterator it = nr.begin(); it != nr.end(); it++){
			if (*it != *j)
				return false;
			j++;
		}

		return true;
	}
*/
}

std::ostream& operator<<(std::ostream& stream, Particle& p) {
	stream << p.toString();
	return stream;
}

std::list<Particle>& Particle::getDirectNeighbors(){
	return directNeighbors;
}

std::list<Particle>& Particle::getDiagNeighbors(){
	return diagNeighbors;
}

int& Particle::getID(){
	return parID;
}

bool Particle::isDirectNeighborTo(Particle& p){
	//ID is unique for each particle
	for (std::list<Particle>::iterator it = this->getDirectNeighbors().begin();
			it != this->getDirectNeighbors().end(); it++){
		if ((*it).getID() == p.getID())
			return true;
	}

	return false;
}

bool Particle::isDiagNeighborTo(Particle& p){
	//ID is unique for each particle
	for (std::list<Particle>::iterator it = this->getDiagNeighbors().begin();
			it != this->getDiagNeighbors().end(); it++){
		if ((*it).getID() == p.getID())
			return true;
	}

	return false;
}
